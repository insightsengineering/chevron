<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="ael01_nollt" timestamp="2023-09-20T17:15:37Z" hostname="4f35574870e0" tests="8" skipped="4" failures="0" errors="0" time="1.451">
    <testcase time="0.604" classname="ael01_nollt" name="ael01_nollt_works_with_admh_dataset"/>
    <testcase time="0.288" classname="ael01_nollt" name="ael01_nollt_works_with_admh_dataset">
      <skipped message="Reason: On CRAN ('test-ael01_nollt.R:7:3')"/>
    </testcase>
    <testcase time="0.1" classname="ael01_nollt" name="ael01_nollt_works_with_non_default_label"/>
    <testcase time="0.168" classname="ael01_nollt" name="ael01_nollt_works_with_non_default_label">
      <skipped message="Reason: On CRAN ('test-ael01_nollt.R:20:3')"/>
    </testcase>
    <testcase time="0.0720000000000001" classname="ael01_nollt" name="ael01_nollt_can_handle_all_missing_values"/>
    <testcase time="0.0590000000000002" classname="ael01_nollt" name="ael01_nollt_can_handle_all_missing_values">
      <skipped message="Reason: On CRAN ('test-ael01_nollt.R:33:3')"/>
    </testcase>
    <testcase time="0.0609999999999999" classname="ael01_nollt" name="ael01_nollt_can_handle_some_missing_values"/>
    <testcase time="0.0990000000000002" classname="ael01_nollt" name="ael01_nollt_can_handle_some_missing_values">
      <skipped message="Reason: On CRAN ('test-ael01_nollt.R:48:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="ael02" timestamp="2023-09-20T17:15:38Z" hostname="4f35574870e0" tests="3" skipped="0" failures="0" errors="3" time="0.251">
    <testcase time="0.0909999999999997" classname="ael02" name="ael02_works_with_adae_dataset">
      <error type="error" message="Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL,  ('test-ael02.R:5:3')">Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL, 
    unique_rows = FALSE, default_formatting = list(all = fmt_config()), 
    col_formatting = NULL, main_title = NULL, subtitles = NULL, 
    main_footer = NULL, prov_footer = NULL) 
{
    if (length(non_disp_cols) &gt; 0 &amp;&amp; length(intersect(key_cols, 
        non_disp_cols)) &gt; 0) {
        stop("Key column also listed in non_disp_cols. All key columns are by", 
            " definition display columns.")
    }
    if (!is.null(disp_cols) &amp;&amp; !is.null(non_disp_cols)) {
        stop("Got non-null values for both disp_cols and non_disp_cols. This is not supported.")
    }
    else if (is.null(disp_cols)) {
        cols &lt;- setdiff(names(df), c(key_cols, non_disp_cols))
    }
    else {
        cols &lt;- disp_cols
    }
    if (!all(sapply(default_formatting, is, class2 = "fmt_config"))) {
        stop("All format configurations supplied in `default_formatting`", 
            " must be of type `fmt_config`.")
    }
    if (!(is.null(col_formatting) || all(sapply(col_formatting, 
        is, class2 = "fmt_config")))) {
        stop("All format configurations supplied in `col_formatting`", 
            " must be of type `fmt_config`.")
    }
    df &lt;- as_tibble(df)
    varlabs &lt;- var_labels(df, fill = TRUE)
    o &lt;- do.call(order, df[key_cols])
    if (is.unsorted(o)) {
        message("sorting incoming data by key columns")
        df &lt;- df[o, ]
    }
    ordercols &lt;- c(key_cols, setdiff(names(df), key_cols))
    df &lt;- df[, ordercols]
    var_labels(df) &lt;- varlabs[ordercols]
    for (cnm in key_cols) {
        df[[cnm]] &lt;- as_keycol(df[[cnm]])
    }
    cols &lt;- c(key_cols, setdiff(cols, key_cols))
    df[cols] &lt;- lapply(cols, function(col) {
        col_class &lt;- tail(class(df[[col]]), 1)
        col_fmt_class &lt;- if (!col_class %in% names(default_formatting) &amp;&amp; 
            is.numeric(df[[col]])) 
            "numeric"
        else col_class
        col_fmt &lt;- if (col %in% names(col_formatting)) {
            col_formatting[[col]]
        }
        else if (col_fmt_class %in% names(default_formatting)) {
            default_formatting[[col_fmt_class]]
        }
        else {
            if (!"all" %in% names(default_formatting)) {
                stop("Format configurations must be supplied for all listing columns. ", 
                  "To cover all remaining columns please add an 'all' configuration", 
                  " to `default_formatting`.")
            }
            default_formatting[["all"]]
        }
        obj_format(df[[col]]) &lt;- obj_format(col_fmt)
        obj_na_str(df[[col]]) &lt;- if (is.null(obj_na_str(col_fmt))) 
            "NA"
        else obj_na_str(col_fmt)
        obj_align(df[[col]]) &lt;- if (is.null(obj_align(col_fmt))) 
            "left"
        else obj_align(col_fmt)
        df[[col]]
    })
    if (unique_rows) 
        df &lt;- df[!duplicated(df[, cols]), ]
    class(df) &lt;- c("listing_df", class(df))
    main_title(df) &lt;- main_title
    main_footer(df) &lt;- main_footer
    subtitles(df) &lt;- subtitles
    prov_footer(df) &lt;- prov_footer
    listing_dispcols(df) &lt;- cols
    df
})(key_cols = key_cols, disp_cols = disp_cols, default_formatting = default_formatting, 
    unique_rows = unique_rows)`: argument "df" is missing, with no default
Backtrace:
     x
  1. +-testthat::expect_silent(run(ael02, syn_data, dataset = "adae")) at test-ael02.R:5:2
  2. | \-testthat:::quasi_capture(enquo(object), NULL, evaluate_promise)
  3. |   +-testthat (local) .capture(...)
  4. |   | +-withr::with_output_sink(...)
  5. |   | | \-base::force(code)
  6. |   | +-base::withCallingHandlers(...)
  7. |   | \-base::withVisible(code)
  8. |   \-rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  9. +-chevron::run(ael02, syn_data, dataset = "adae")
 10. +-chevron::run(ael02, syn_data, dataset = "adae")
 11. | \-chevron:::do_call(object@main, c(proc_data, user_args))
 12. |   \-base::do.call(what, new_args, envir = args_env)
 13. +-chevron (local) `&lt;fn&gt;`(adam_db = adam_db, dataset = dataset)
 14. | \-chevron:::execute_with_args(...)
 15. |   \-chevron:::do_call(fun, args[intersect(names(args), formalArgs(fun))])
 16. |     \-base::do.call(what, new_args, envir = args_env)
 17. \-rlistings (local) `&lt;fn&gt;`(...)
 18.   \-tibble::as_tibble(df)</error>
    </testcase>
    <testcase time="0.0830000000000002" classname="ael02" name="ael02_can_handle_all_missing_values">
      <error type="error" message="Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL,  ('test-ael02.R:20:3')">Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL, 
    unique_rows = FALSE, default_formatting = list(all = fmt_config()), 
    col_formatting = NULL, main_title = NULL, subtitles = NULL, 
    main_footer = NULL, prov_footer = NULL) 
{
    if (length(non_disp_cols) &gt; 0 &amp;&amp; length(intersect(key_cols, 
        non_disp_cols)) &gt; 0) {
        stop("Key column also listed in non_disp_cols. All key columns are by", 
            " definition display columns.")
    }
    if (!is.null(disp_cols) &amp;&amp; !is.null(non_disp_cols)) {
        stop("Got non-null values for both disp_cols and non_disp_cols. This is not supported.")
    }
    else if (is.null(disp_cols)) {
        cols &lt;- setdiff(names(df), c(key_cols, non_disp_cols))
    }
    else {
        cols &lt;- disp_cols
    }
    if (!all(sapply(default_formatting, is, class2 = "fmt_config"))) {
        stop("All format configurations supplied in `default_formatting`", 
            " must be of type `fmt_config`.")
    }
    if (!(is.null(col_formatting) || all(sapply(col_formatting, 
        is, class2 = "fmt_config")))) {
        stop("All format configurations supplied in `col_formatting`", 
            " must be of type `fmt_config`.")
    }
    df &lt;- as_tibble(df)
    varlabs &lt;- var_labels(df, fill = TRUE)
    o &lt;- do.call(order, df[key_cols])
    if (is.unsorted(o)) {
        message("sorting incoming data by key columns")
        df &lt;- df[o, ]
    }
    ordercols &lt;- c(key_cols, setdiff(names(df), key_cols))
    df &lt;- df[, ordercols]
    var_labels(df) &lt;- varlabs[ordercols]
    for (cnm in key_cols) {
        df[[cnm]] &lt;- as_keycol(df[[cnm]])
    }
    cols &lt;- c(key_cols, setdiff(cols, key_cols))
    df[cols] &lt;- lapply(cols, function(col) {
        col_class &lt;- tail(class(df[[col]]), 1)
        col_fmt_class &lt;- if (!col_class %in% names(default_formatting) &amp;&amp; 
            is.numeric(df[[col]])) 
            "numeric"
        else col_class
        col_fmt &lt;- if (col %in% names(col_formatting)) {
            col_formatting[[col]]
        }
        else if (col_fmt_class %in% names(default_formatting)) {
            default_formatting[[col_fmt_class]]
        }
        else {
            if (!"all" %in% names(default_formatting)) {
                stop("Format configurations must be supplied for all listing columns. ", 
                  "To cover all remaining columns please add an 'all' configuration", 
                  " to `default_formatting`.")
            }
            default_formatting[["all"]]
        }
        obj_format(df[[col]]) &lt;- obj_format(col_fmt)
        obj_na_str(df[[col]]) &lt;- if (is.null(obj_na_str(col_fmt))) 
            "NA"
        else obj_na_str(col_fmt)
        obj_align(df[[col]]) &lt;- if (is.null(obj_align(col_fmt))) 
            "left"
        else obj_align(col_fmt)
        df[[col]]
    })
    if (unique_rows) 
        df &lt;- df[!duplicated(df[, cols]), ]
    class(df) &lt;- c("listing_df", class(df))
    main_title(df) &lt;- main_title
    main_footer(df) &lt;- main_footer
    subtitles(df) &lt;- subtitles
    prov_footer(df) &lt;- prov_footer
    listing_dispcols(df) &lt;- cols
    df
})(key_cols = key_cols, disp_cols = disp_cols, default_formatting = default_formatting, 
    unique_rows = unique_rows)`: argument "df" is missing, with no default
Backtrace:
     x
  1. +-testthat::expect_silent(run(ael02, proc_data)) at test-ael02.R:20:2
  2. | \-testthat:::quasi_capture(enquo(object), NULL, evaluate_promise)
  3. |   +-testthat (local) .capture(...)
  4. |   | +-withr::with_output_sink(...)
  5. |   | | \-base::force(code)
  6. |   | +-base::withCallingHandlers(...)
  7. |   | \-base::withVisible(code)
  8. |   \-rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  9. +-chevron::run(ael02, proc_data)
 10. +-chevron::run(ael02, proc_data)
 11. | \-chevron:::do_call(object@main, c(proc_data, user_args))
 12. |   \-base::do.call(what, new_args, envir = args_env)
 13. +-chevron (local) `&lt;fn&gt;`(adam_db = adam_db)
 14. | \-chevron:::execute_with_args(...)
 15. |   \-chevron:::do_call(fun, args[intersect(names(args), formalArgs(fun))])
 16. |     \-base::do.call(what, new_args, envir = args_env)
 17. \-rlistings (local) `&lt;fn&gt;`(...)
 18.   \-tibble::as_tibble(df)</error>
    </testcase>
    <testcase time="0.077" classname="ael02" name="ael02_functions_work_as_expected">
      <error type="error" message="Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL,  ('test-ael02.R:27:3')">Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL, 
    unique_rows = FALSE, default_formatting = list(all = fmt_config()), 
    col_formatting = NULL, main_title = NULL, subtitles = NULL, 
    main_footer = NULL, prov_footer = NULL) 
{
    if (length(non_disp_cols) &gt; 0 &amp;&amp; length(intersect(key_cols, 
        non_disp_cols)) &gt; 0) {
        stop("Key column also listed in non_disp_cols. All key columns are by", 
            " definition display columns.")
    }
    if (!is.null(disp_cols) &amp;&amp; !is.null(non_disp_cols)) {
        stop("Got non-null values for both disp_cols and non_disp_cols. This is not supported.")
    }
    else if (is.null(disp_cols)) {
        cols &lt;- setdiff(names(df), c(key_cols, non_disp_cols))
    }
    else {
        cols &lt;- disp_cols
    }
    if (!all(sapply(default_formatting, is, class2 = "fmt_config"))) {
        stop("All format configurations supplied in `default_formatting`", 
            " must be of type `fmt_config`.")
    }
    if (!(is.null(col_formatting) || all(sapply(col_formatting, 
        is, class2 = "fmt_config")))) {
        stop("All format configurations supplied in `col_formatting`", 
            " must be of type `fmt_config`.")
    }
    df &lt;- as_tibble(df)
    varlabs &lt;- var_labels(df, fill = TRUE)
    o &lt;- do.call(order, df[key_cols])
    if (is.unsorted(o)) {
        message("sorting incoming data by key columns")
        df &lt;- df[o, ]
    }
    ordercols &lt;- c(key_cols, setdiff(names(df), key_cols))
    df &lt;- df[, ordercols]
    var_labels(df) &lt;- varlabs[ordercols]
    for (cnm in key_cols) {
        df[[cnm]] &lt;- as_keycol(df[[cnm]])
    }
    cols &lt;- c(key_cols, setdiff(cols, key_cols))
    df[cols] &lt;- lapply(cols, function(col) {
        col_class &lt;- tail(class(df[[col]]), 1)
        col_fmt_class &lt;- if (!col_class %in% names(default_formatting) &amp;&amp; 
            is.numeric(df[[col]])) 
            "numeric"
        else col_class
        col_fmt &lt;- if (col %in% names(col_formatting)) {
            col_formatting[[col]]
        }
        else if (col_fmt_class %in% names(default_formatting)) {
            default_formatting[[col_fmt_class]]
        }
        else {
            if (!"all" %in% names(default_formatting)) {
                stop("Format configurations must be supplied for all listing columns. ", 
                  "To cover all remaining columns please add an 'all' configuration", 
                  " to `default_formatting`.")
            }
            default_formatting[["all"]]
        }
        obj_format(df[[col]]) &lt;- obj_format(col_fmt)
        obj_na_str(df[[col]]) &lt;- if (is.null(obj_na_str(col_fmt))) 
            "NA"
        else obj_na_str(col_fmt)
        obj_align(df[[col]]) &lt;- if (is.null(obj_align(col_fmt))) 
            "left"
        else obj_align(col_fmt)
        df[[col]]
    })
    if (unique_rows) 
        df &lt;- df[!duplicated(df[, cols]), ]
    class(df) &lt;- c("listing_df", class(df))
    main_title(df) &lt;- main_title
    main_footer(df) &lt;- main_footer
    subtitles(df) &lt;- subtitles
    prov_footer(df) &lt;- prov_footer
    listing_dispcols(df) &lt;- cols
    df
})(key_cols = key_cols, disp_cols = disp_cols, default_formatting = default_formatting, 
    unique_rows = unique_rows)`: argument "df" is missing, with no default
Backtrace:
     x
  1. +-testthat::expect_silent(ael02_pre(syn_data) %&gt;% ael02_main()) at test-ael02.R:27:2
  2. | \-testthat:::quasi_capture(enquo(object), NULL, evaluate_promise)
  3. |   +-testthat (local) .capture(...)
  4. |   | +-withr::with_output_sink(...)
  5. |   | | \-base::force(code)
  6. |   | +-base::withCallingHandlers(...)
  7. |   | \-base::withVisible(code)
  8. |   \-rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  9. +-ael02_pre(syn_data) %&gt;% ael02_main()
 10. +-chevron::ael02_main(.)
 11. | \-chevron:::execute_with_args(...)
 12. |   \-chevron:::do_call(fun, args[intersect(names(args), formalArgs(fun))])
 13. |     \-base::do.call(what, new_args, envir = args_env)
 14. \-rlistings (local) `&lt;fn&gt;`(...)
 15.   \-tibble::as_tibble(df)</error>
    </testcase>
  </testsuite>
  <testsuite name="ael03" timestamp="2023-09-20T17:15:38Z" hostname="4f35574870e0" tests="3" skipped="0" failures="0" errors="3" time="0.24">
    <testcase time="0.0979999999999999" classname="ael03" name="ael03_works_with_adae_dataset">
      <error type="error" message="Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL,  ('test-ael03.R:4:3')">Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL, 
    unique_rows = FALSE, default_formatting = list(all = fmt_config()), 
    col_formatting = NULL, main_title = NULL, subtitles = NULL, 
    main_footer = NULL, prov_footer = NULL) 
{
    if (length(non_disp_cols) &gt; 0 &amp;&amp; length(intersect(key_cols, 
        non_disp_cols)) &gt; 0) {
        stop("Key column also listed in non_disp_cols. All key columns are by", 
            " definition display columns.")
    }
    if (!is.null(disp_cols) &amp;&amp; !is.null(non_disp_cols)) {
        stop("Got non-null values for both disp_cols and non_disp_cols. This is not supported.")
    }
    else if (is.null(disp_cols)) {
        cols &lt;- setdiff(names(df), c(key_cols, non_disp_cols))
    }
    else {
        cols &lt;- disp_cols
    }
    if (!all(sapply(default_formatting, is, class2 = "fmt_config"))) {
        stop("All format configurations supplied in `default_formatting`", 
            " must be of type `fmt_config`.")
    }
    if (!(is.null(col_formatting) || all(sapply(col_formatting, 
        is, class2 = "fmt_config")))) {
        stop("All format configurations supplied in `col_formatting`", 
            " must be of type `fmt_config`.")
    }
    df &lt;- as_tibble(df)
    varlabs &lt;- var_labels(df, fill = TRUE)
    o &lt;- do.call(order, df[key_cols])
    if (is.unsorted(o)) {
        message("sorting incoming data by key columns")
        df &lt;- df[o, ]
    }
    ordercols &lt;- c(key_cols, setdiff(names(df), key_cols))
    df &lt;- df[, ordercols]
    var_labels(df) &lt;- varlabs[ordercols]
    for (cnm in key_cols) {
        df[[cnm]] &lt;- as_keycol(df[[cnm]])
    }
    cols &lt;- c(key_cols, setdiff(cols, key_cols))
    df[cols] &lt;- lapply(cols, function(col) {
        col_class &lt;- tail(class(df[[col]]), 1)
        col_fmt_class &lt;- if (!col_class %in% names(default_formatting) &amp;&amp; 
            is.numeric(df[[col]])) 
            "numeric"
        else col_class
        col_fmt &lt;- if (col %in% names(col_formatting)) {
            col_formatting[[col]]
        }
        else if (col_fmt_class %in% names(default_formatting)) {
            default_formatting[[col_fmt_class]]
        }
        else {
            if (!"all" %in% names(default_formatting)) {
                stop("Format configurations must be supplied for all listing columns. ", 
                  "To cover all remaining columns please add an 'all' configuration", 
                  " to `default_formatting`.")
            }
            default_formatting[["all"]]
        }
        obj_format(df[[col]]) &lt;- obj_format(col_fmt)
        obj_na_str(df[[col]]) &lt;- if (is.null(obj_na_str(col_fmt))) 
            "NA"
        else obj_na_str(col_fmt)
        obj_align(df[[col]]) &lt;- if (is.null(obj_align(col_fmt))) 
            "left"
        else obj_align(col_fmt)
        df[[col]]
    })
    if (unique_rows) 
        df &lt;- df[!duplicated(df[, cols]), ]
    class(df) &lt;- c("listing_df", class(df))
    main_title(df) &lt;- main_title
    main_footer(df) &lt;- main_footer
    subtitles(df) &lt;- subtitles
    prov_footer(df) &lt;- prov_footer
    listing_dispcols(df) &lt;- cols
    df
})(key_cols = key_cols, disp_cols = disp_cols, default_formatting = default_formatting, 
    unique_rows = unique_rows)`: argument "df" is missing, with no default
Backtrace:
     x
  1. +-testthat::expect_silent(run(ael03, syn_data, dataset = "adae")) at test-ael03.R:4:2
  2. | \-testthat:::quasi_capture(enquo(object), NULL, evaluate_promise)
  3. |   +-testthat (local) .capture(...)
  4. |   | +-withr::with_output_sink(...)
  5. |   | | \-base::force(code)
  6. |   | +-base::withCallingHandlers(...)
  7. |   | \-base::withVisible(code)
  8. |   \-rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  9. +-chevron::run(ael03, syn_data, dataset = "adae")
 10. +-chevron::run(ael03, syn_data, dataset = "adae")
 11. | \-chevron:::do_call(object@main, c(proc_data, user_args))
 12. |   \-base::do.call(what, new_args, envir = args_env)
 13. +-chevron (local) `&lt;fn&gt;`(adam_db = adam_db, dataset = dataset)
 14. | \-chevron:::execute_with_args(...)
 15. |   \-chevron:::do_call(fun, args[intersect(names(args), formalArgs(fun))])
 16. |     \-base::do.call(what, new_args, envir = args_env)
 17. \-rlistings (local) `&lt;fn&gt;`(...)
 18.   \-tibble::as_tibble(df)</error>
    </testcase>
    <testcase time="0.0730000000000004" classname="ael03" name="ael03_can_handle_all_missing_values">
      <error type="error" message="Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL,  ('test-ael03.R:19:3')">Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL, 
    unique_rows = FALSE, default_formatting = list(all = fmt_config()), 
    col_formatting = NULL, main_title = NULL, subtitles = NULL, 
    main_footer = NULL, prov_footer = NULL) 
{
    if (length(non_disp_cols) &gt; 0 &amp;&amp; length(intersect(key_cols, 
        non_disp_cols)) &gt; 0) {
        stop("Key column also listed in non_disp_cols. All key columns are by", 
            " definition display columns.")
    }
    if (!is.null(disp_cols) &amp;&amp; !is.null(non_disp_cols)) {
        stop("Got non-null values for both disp_cols and non_disp_cols. This is not supported.")
    }
    else if (is.null(disp_cols)) {
        cols &lt;- setdiff(names(df), c(key_cols, non_disp_cols))
    }
    else {
        cols &lt;- disp_cols
    }
    if (!all(sapply(default_formatting, is, class2 = "fmt_config"))) {
        stop("All format configurations supplied in `default_formatting`", 
            " must be of type `fmt_config`.")
    }
    if (!(is.null(col_formatting) || all(sapply(col_formatting, 
        is, class2 = "fmt_config")))) {
        stop("All format configurations supplied in `col_formatting`", 
            " must be of type `fmt_config`.")
    }
    df &lt;- as_tibble(df)
    varlabs &lt;- var_labels(df, fill = TRUE)
    o &lt;- do.call(order, df[key_cols])
    if (is.unsorted(o)) {
        message("sorting incoming data by key columns")
        df &lt;- df[o, ]
    }
    ordercols &lt;- c(key_cols, setdiff(names(df), key_cols))
    df &lt;- df[, ordercols]
    var_labels(df) &lt;- varlabs[ordercols]
    for (cnm in key_cols) {
        df[[cnm]] &lt;- as_keycol(df[[cnm]])
    }
    cols &lt;- c(key_cols, setdiff(cols, key_cols))
    df[cols] &lt;- lapply(cols, function(col) {
        col_class &lt;- tail(class(df[[col]]), 1)
        col_fmt_class &lt;- if (!col_class %in% names(default_formatting) &amp;&amp; 
            is.numeric(df[[col]])) 
            "numeric"
        else col_class
        col_fmt &lt;- if (col %in% names(col_formatting)) {
            col_formatting[[col]]
        }
        else if (col_fmt_class %in% names(default_formatting)) {
            default_formatting[[col_fmt_class]]
        }
        else {
            if (!"all" %in% names(default_formatting)) {
                stop("Format configurations must be supplied for all listing columns. ", 
                  "To cover all remaining columns please add an 'all' configuration", 
                  " to `default_formatting`.")
            }
            default_formatting[["all"]]
        }
        obj_format(df[[col]]) &lt;- obj_format(col_fmt)
        obj_na_str(df[[col]]) &lt;- if (is.null(obj_na_str(col_fmt))) 
            "NA"
        else obj_na_str(col_fmt)
        obj_align(df[[col]]) &lt;- if (is.null(obj_align(col_fmt))) 
            "left"
        else obj_align(col_fmt)
        df[[col]]
    })
    if (unique_rows) 
        df &lt;- df[!duplicated(df[, cols]), ]
    class(df) &lt;- c("listing_df", class(df))
    main_title(df) &lt;- main_title
    main_footer(df) &lt;- main_footer
    subtitles(df) &lt;- subtitles
    prov_footer(df) &lt;- prov_footer
    listing_dispcols(df) &lt;- cols
    df
})(key_cols = key_cols, disp_cols = disp_cols, default_formatting = default_formatting, 
    unique_rows = unique_rows)`: argument "df" is missing, with no default
Backtrace:
     x
  1. +-testthat::expect_silent(run(ael03, proc_data)) at test-ael03.R:19:2
  2. | \-testthat:::quasi_capture(enquo(object), NULL, evaluate_promise)
  3. |   +-testthat (local) .capture(...)
  4. |   | +-withr::with_output_sink(...)
  5. |   | | \-base::force(code)
  6. |   | +-base::withCallingHandlers(...)
  7. |   | \-base::withVisible(code)
  8. |   \-rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  9. +-chevron::run(ael03, proc_data)
 10. +-chevron::run(ael03, proc_data)
 11. | \-chevron:::do_call(object@main, c(proc_data, user_args))
 12. |   \-base::do.call(what, new_args, envir = args_env)
 13. +-chevron (local) `&lt;fn&gt;`(adam_db = adam_db)
 14. | \-chevron:::execute_with_args(...)
 15. |   \-chevron:::do_call(fun, args[intersect(names(args), formalArgs(fun))])
 16. |     \-base::do.call(what, new_args, envir = args_env)
 17. \-rlistings (local) `&lt;fn&gt;`(...)
 18.   \-tibble::as_tibble(df)</error>
    </testcase>
    <testcase time="0.069" classname="ael03" name="ael03_functions_work_as_expected">
      <error type="error" message="Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL,  ('test-ael03.R:26:3')">Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL, 
    unique_rows = FALSE, default_formatting = list(all = fmt_config()), 
    col_formatting = NULL, main_title = NULL, subtitles = NULL, 
    main_footer = NULL, prov_footer = NULL) 
{
    if (length(non_disp_cols) &gt; 0 &amp;&amp; length(intersect(key_cols, 
        non_disp_cols)) &gt; 0) {
        stop("Key column also listed in non_disp_cols. All key columns are by", 
            " definition display columns.")
    }
    if (!is.null(disp_cols) &amp;&amp; !is.null(non_disp_cols)) {
        stop("Got non-null values for both disp_cols and non_disp_cols. This is not supported.")
    }
    else if (is.null(disp_cols)) {
        cols &lt;- setdiff(names(df), c(key_cols, non_disp_cols))
    }
    else {
        cols &lt;- disp_cols
    }
    if (!all(sapply(default_formatting, is, class2 = "fmt_config"))) {
        stop("All format configurations supplied in `default_formatting`", 
            " must be of type `fmt_config`.")
    }
    if (!(is.null(col_formatting) || all(sapply(col_formatting, 
        is, class2 = "fmt_config")))) {
        stop("All format configurations supplied in `col_formatting`", 
            " must be of type `fmt_config`.")
    }
    df &lt;- as_tibble(df)
    varlabs &lt;- var_labels(df, fill = TRUE)
    o &lt;- do.call(order, df[key_cols])
    if (is.unsorted(o)) {
        message("sorting incoming data by key columns")
        df &lt;- df[o, ]
    }
    ordercols &lt;- c(key_cols, setdiff(names(df), key_cols))
    df &lt;- df[, ordercols]
    var_labels(df) &lt;- varlabs[ordercols]
    for (cnm in key_cols) {
        df[[cnm]] &lt;- as_keycol(df[[cnm]])
    }
    cols &lt;- c(key_cols, setdiff(cols, key_cols))
    df[cols] &lt;- lapply(cols, function(col) {
        col_class &lt;- tail(class(df[[col]]), 1)
        col_fmt_class &lt;- if (!col_class %in% names(default_formatting) &amp;&amp; 
            is.numeric(df[[col]])) 
            "numeric"
        else col_class
        col_fmt &lt;- if (col %in% names(col_formatting)) {
            col_formatting[[col]]
        }
        else if (col_fmt_class %in% names(default_formatting)) {
            default_formatting[[col_fmt_class]]
        }
        else {
            if (!"all" %in% names(default_formatting)) {
                stop("Format configurations must be supplied for all listing columns. ", 
                  "To cover all remaining columns please add an 'all' configuration", 
                  " to `default_formatting`.")
            }
            default_formatting[["all"]]
        }
        obj_format(df[[col]]) &lt;- obj_format(col_fmt)
        obj_na_str(df[[col]]) &lt;- if (is.null(obj_na_str(col_fmt))) 
            "NA"
        else obj_na_str(col_fmt)
        obj_align(df[[col]]) &lt;- if (is.null(obj_align(col_fmt))) 
            "left"
        else obj_align(col_fmt)
        df[[col]]
    })
    if (unique_rows) 
        df &lt;- df[!duplicated(df[, cols]), ]
    class(df) &lt;- c("listing_df", class(df))
    main_title(df) &lt;- main_title
    main_footer(df) &lt;- main_footer
    subtitles(df) &lt;- subtitles
    prov_footer(df) &lt;- prov_footer
    listing_dispcols(df) &lt;- cols
    df
})(key_cols = key_cols, disp_cols = disp_cols, default_formatting = default_formatting, 
    unique_rows = unique_rows)`: argument "df" is missing, with no default
Backtrace:
     x
  1. +-testthat::expect_silent(ael03_pre(syn_data) %&gt;% ael03_main()) at test-ael03.R:26:2
  2. | \-testthat:::quasi_capture(enquo(object), NULL, evaluate_promise)
  3. |   +-testthat (local) .capture(...)
  4. |   | +-withr::with_output_sink(...)
  5. |   | | \-base::force(code)
  6. |   | +-base::withCallingHandlers(...)
  7. |   | \-base::withVisible(code)
  8. |   \-rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  9. +-ael03_pre(syn_data) %&gt;% ael03_main()
 10. +-chevron::ael03_main(.)
 11. | \-chevron:::execute_with_args(...)
 12. |   \-chevron:::do_call(fun, args[intersect(names(args), formalArgs(fun))])
 13. |     \-base::do.call(what, new_args, envir = args_env)
 14. \-rlistings (local) `&lt;fn&gt;`(...)
 15.   \-tibble::as_tibble(df)</error>
    </testcase>
  </testsuite>
  <testsuite name="ael04" timestamp="2023-09-20T17:15:39Z" hostname="4f35574870e0" tests="3" skipped="0" failures="0" errors="3" time="0.193">
    <testcase time="0.0829999999999993" classname="ael04" name="ael04_works_with_adsl_dataset">
      <error type="error" message="Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL,  ('test-ael04.R:4:3')">Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL, 
    unique_rows = FALSE, default_formatting = list(all = fmt_config()), 
    col_formatting = NULL, main_title = NULL, subtitles = NULL, 
    main_footer = NULL, prov_footer = NULL) 
{
    if (length(non_disp_cols) &gt; 0 &amp;&amp; length(intersect(key_cols, 
        non_disp_cols)) &gt; 0) {
        stop("Key column also listed in non_disp_cols. All key columns are by", 
            " definition display columns.")
    }
    if (!is.null(disp_cols) &amp;&amp; !is.null(non_disp_cols)) {
        stop("Got non-null values for both disp_cols and non_disp_cols. This is not supported.")
    }
    else if (is.null(disp_cols)) {
        cols &lt;- setdiff(names(df), c(key_cols, non_disp_cols))
    }
    else {
        cols &lt;- disp_cols
    }
    if (!all(sapply(default_formatting, is, class2 = "fmt_config"))) {
        stop("All format configurations supplied in `default_formatting`", 
            " must be of type `fmt_config`.")
    }
    if (!(is.null(col_formatting) || all(sapply(col_formatting, 
        is, class2 = "fmt_config")))) {
        stop("All format configurations supplied in `col_formatting`", 
            " must be of type `fmt_config`.")
    }
    df &lt;- as_tibble(df)
    varlabs &lt;- var_labels(df, fill = TRUE)
    o &lt;- do.call(order, df[key_cols])
    if (is.unsorted(o)) {
        message("sorting incoming data by key columns")
        df &lt;- df[o, ]
    }
    ordercols &lt;- c(key_cols, setdiff(names(df), key_cols))
    df &lt;- df[, ordercols]
    var_labels(df) &lt;- varlabs[ordercols]
    for (cnm in key_cols) {
        df[[cnm]] &lt;- as_keycol(df[[cnm]])
    }
    cols &lt;- c(key_cols, setdiff(cols, key_cols))
    df[cols] &lt;- lapply(cols, function(col) {
        col_class &lt;- tail(class(df[[col]]), 1)
        col_fmt_class &lt;- if (!col_class %in% names(default_formatting) &amp;&amp; 
            is.numeric(df[[col]])) 
            "numeric"
        else col_class
        col_fmt &lt;- if (col %in% names(col_formatting)) {
            col_formatting[[col]]
        }
        else if (col_fmt_class %in% names(default_formatting)) {
            default_formatting[[col_fmt_class]]
        }
        else {
            if (!"all" %in% names(default_formatting)) {
                stop("Format configurations must be supplied for all listing columns. ", 
                  "To cover all remaining columns please add an 'all' configuration", 
                  " to `default_formatting`.")
            }
            default_formatting[["all"]]
        }
        obj_format(df[[col]]) &lt;- obj_format(col_fmt)
        obj_na_str(df[[col]]) &lt;- if (is.null(obj_na_str(col_fmt))) 
            "NA"
        else obj_na_str(col_fmt)
        obj_align(df[[col]]) &lt;- if (is.null(obj_align(col_fmt))) 
            "left"
        else obj_align(col_fmt)
        df[[col]]
    })
    if (unique_rows) 
        df &lt;- df[!duplicated(df[, cols]), ]
    class(df) &lt;- c("listing_df", class(df))
    main_title(df) &lt;- main_title
    main_footer(df) &lt;- main_footer
    subtitles(df) &lt;- subtitles
    prov_footer(df) &lt;- prov_footer
    listing_dispcols(df) &lt;- cols
    df
})(key_cols = key_cols, disp_cols = disp_cols, default_formatting = default_formatting, 
    unique_rows = unique_rows)`: argument "df" is missing, with no default
Backtrace:
     x
  1. +-testthat::expect_message(res &lt;- run(ael04, syn_data, dataset = "adsl")) at test-ael04.R:4:2
  2. | \-testthat:::expect_condition_matching(...)
  3. |   \-testthat:::quasi_capture(...)
  4. |     +-testthat (local) .capture(...)
  5. |     | \-base::withCallingHandlers(...)
  6. |     \-rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  7. +-chevron::run(ael04, syn_data, dataset = "adsl")
  8. +-chevron::run(ael04, syn_data, dataset = "adsl")
  9. | \-chevron:::do_call(object@main, c(proc_data, user_args))
 10. |   \-base::do.call(what, new_args, envir = args_env)
 11. +-chevron (local) `&lt;fn&gt;`(adam_db = adam_db, dataset = dataset)
 12. | \-chevron:::execute_with_args(...)
 13. |   \-chevron:::do_call(fun, args[intersect(names(args), formalArgs(fun))])
 14. |     \-base::do.call(what, new_args, envir = args_env)
 15. \-rlistings (local) `&lt;fn&gt;`(...)
 16.   \-tibble::as_tibble(df)</error>
    </testcase>
    <testcase time="0.0570000000000004" classname="ael04" name="ael04_can_handle_all_missing_values">
      <error type="error" message="Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL,  ('test-ael04.R:18:3')">Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL, 
    unique_rows = FALSE, default_formatting = list(all = fmt_config()), 
    col_formatting = NULL, main_title = NULL, subtitles = NULL, 
    main_footer = NULL, prov_footer = NULL) 
{
    if (length(non_disp_cols) &gt; 0 &amp;&amp; length(intersect(key_cols, 
        non_disp_cols)) &gt; 0) {
        stop("Key column also listed in non_disp_cols. All key columns are by", 
            " definition display columns.")
    }
    if (!is.null(disp_cols) &amp;&amp; !is.null(non_disp_cols)) {
        stop("Got non-null values for both disp_cols and non_disp_cols. This is not supported.")
    }
    else if (is.null(disp_cols)) {
        cols &lt;- setdiff(names(df), c(key_cols, non_disp_cols))
    }
    else {
        cols &lt;- disp_cols
    }
    if (!all(sapply(default_formatting, is, class2 = "fmt_config"))) {
        stop("All format configurations supplied in `default_formatting`", 
            " must be of type `fmt_config`.")
    }
    if (!(is.null(col_formatting) || all(sapply(col_formatting, 
        is, class2 = "fmt_config")))) {
        stop("All format configurations supplied in `col_formatting`", 
            " must be of type `fmt_config`.")
    }
    df &lt;- as_tibble(df)
    varlabs &lt;- var_labels(df, fill = TRUE)
    o &lt;- do.call(order, df[key_cols])
    if (is.unsorted(o)) {
        message("sorting incoming data by key columns")
        df &lt;- df[o, ]
    }
    ordercols &lt;- c(key_cols, setdiff(names(df), key_cols))
    df &lt;- df[, ordercols]
    var_labels(df) &lt;- varlabs[ordercols]
    for (cnm in key_cols) {
        df[[cnm]] &lt;- as_keycol(df[[cnm]])
    }
    cols &lt;- c(key_cols, setdiff(cols, key_cols))
    df[cols] &lt;- lapply(cols, function(col) {
        col_class &lt;- tail(class(df[[col]]), 1)
        col_fmt_class &lt;- if (!col_class %in% names(default_formatting) &amp;&amp; 
            is.numeric(df[[col]])) 
            "numeric"
        else col_class
        col_fmt &lt;- if (col %in% names(col_formatting)) {
            col_formatting[[col]]
        }
        else if (col_fmt_class %in% names(default_formatting)) {
            default_formatting[[col_fmt_class]]
        }
        else {
            if (!"all" %in% names(default_formatting)) {
                stop("Format configurations must be supplied for all listing columns. ", 
                  "To cover all remaining columns please add an 'all' configuration", 
                  " to `default_formatting`.")
            }
            default_formatting[["all"]]
        }
        obj_format(df[[col]]) &lt;- obj_format(col_fmt)
        obj_na_str(df[[col]]) &lt;- if (is.null(obj_na_str(col_fmt))) 
            "NA"
        else obj_na_str(col_fmt)
        obj_align(df[[col]]) &lt;- if (is.null(obj_align(col_fmt))) 
            "left"
        else obj_align(col_fmt)
        df[[col]]
    })
    if (unique_rows) 
        df &lt;- df[!duplicated(df[, cols]), ]
    class(df) &lt;- c("listing_df", class(df))
    main_title(df) &lt;- main_title
    main_footer(df) &lt;- main_footer
    subtitles(df) &lt;- subtitles
    prov_footer(df) &lt;- prov_footer
    listing_dispcols(df) &lt;- cols
    df
})(key_cols = key_cols, disp_cols = disp_cols, default_formatting = default_formatting, 
    unique_rows = unique_rows)`: argument "df" is missing, with no default
Backtrace:
     x
  1. +-testthat::expect_message(res &lt;- run(ael04, proc_data)) at test-ael04.R:18:2
  2. | \-testthat:::expect_condition_matching(...)
  3. |   \-testthat:::quasi_capture(...)
  4. |     +-testthat (local) .capture(...)
  5. |     | \-base::withCallingHandlers(...)
  6. |     \-rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  7. +-chevron::run(ael04, proc_data)
  8. +-chevron::run(ael04, proc_data)
  9. | \-chevron:::do_call(object@main, c(proc_data, user_args))
 10. |   \-base::do.call(what, new_args, envir = args_env)
 11. +-chevron (local) `&lt;fn&gt;`(adam_db = adam_db)
 12. | \-chevron:::execute_with_args(...)
 13. |   \-chevron:::do_call(fun, args[intersect(names(args), formalArgs(fun))])
 14. |     \-base::do.call(what, new_args, envir = args_env)
 15. \-rlistings (local) `&lt;fn&gt;`(...)
 16.   \-tibble::as_tibble(df)</error>
    </testcase>
    <testcase time="0.0529999999999999" classname="ael04" name="ael04_functions_work_as_expected">
      <error type="error" message="Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL,  ('test-ael04.R:25:3')">Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL, 
    unique_rows = FALSE, default_formatting = list(all = fmt_config()), 
    col_formatting = NULL, main_title = NULL, subtitles = NULL, 
    main_footer = NULL, prov_footer = NULL) 
{
    if (length(non_disp_cols) &gt; 0 &amp;&amp; length(intersect(key_cols, 
        non_disp_cols)) &gt; 0) {
        stop("Key column also listed in non_disp_cols. All key columns are by", 
            " definition display columns.")
    }
    if (!is.null(disp_cols) &amp;&amp; !is.null(non_disp_cols)) {
        stop("Got non-null values for both disp_cols and non_disp_cols. This is not supported.")
    }
    else if (is.null(disp_cols)) {
        cols &lt;- setdiff(names(df), c(key_cols, non_disp_cols))
    }
    else {
        cols &lt;- disp_cols
    }
    if (!all(sapply(default_formatting, is, class2 = "fmt_config"))) {
        stop("All format configurations supplied in `default_formatting`", 
            " must be of type `fmt_config`.")
    }
    if (!(is.null(col_formatting) || all(sapply(col_formatting, 
        is, class2 = "fmt_config")))) {
        stop("All format configurations supplied in `col_formatting`", 
            " must be of type `fmt_config`.")
    }
    df &lt;- as_tibble(df)
    varlabs &lt;- var_labels(df, fill = TRUE)
    o &lt;- do.call(order, df[key_cols])
    if (is.unsorted(o)) {
        message("sorting incoming data by key columns")
        df &lt;- df[o, ]
    }
    ordercols &lt;- c(key_cols, setdiff(names(df), key_cols))
    df &lt;- df[, ordercols]
    var_labels(df) &lt;- varlabs[ordercols]
    for (cnm in key_cols) {
        df[[cnm]] &lt;- as_keycol(df[[cnm]])
    }
    cols &lt;- c(key_cols, setdiff(cols, key_cols))
    df[cols] &lt;- lapply(cols, function(col) {
        col_class &lt;- tail(class(df[[col]]), 1)
        col_fmt_class &lt;- if (!col_class %in% names(default_formatting) &amp;&amp; 
            is.numeric(df[[col]])) 
            "numeric"
        else col_class
        col_fmt &lt;- if (col %in% names(col_formatting)) {
            col_formatting[[col]]
        }
        else if (col_fmt_class %in% names(default_formatting)) {
            default_formatting[[col_fmt_class]]
        }
        else {
            if (!"all" %in% names(default_formatting)) {
                stop("Format configurations must be supplied for all listing columns. ", 
                  "To cover all remaining columns please add an 'all' configuration", 
                  " to `default_formatting`.")
            }
            default_formatting[["all"]]
        }
        obj_format(df[[col]]) &lt;- obj_format(col_fmt)
        obj_na_str(df[[col]]) &lt;- if (is.null(obj_na_str(col_fmt))) 
            "NA"
        else obj_na_str(col_fmt)
        obj_align(df[[col]]) &lt;- if (is.null(obj_align(col_fmt))) 
            "left"
        else obj_align(col_fmt)
        df[[col]]
    })
    if (unique_rows) 
        df &lt;- df[!duplicated(df[, cols]), ]
    class(df) &lt;- c("listing_df", class(df))
    main_title(df) &lt;- main_title
    main_footer(df) &lt;- main_footer
    subtitles(df) &lt;- subtitles
    prov_footer(df) &lt;- prov_footer
    listing_dispcols(df) &lt;- cols
    df
})(key_cols = key_cols, disp_cols = disp_cols, default_formatting = default_formatting, 
    unique_rows = unique_rows)`: argument "df" is missing, with no default
Backtrace:
     x
  1. +-testthat::expect_message(res &lt;- ael04_pre(syn_data) %&gt;% ael04_main()) at test-ael04.R:25:2
  2. | \-testthat:::expect_condition_matching(...)
  3. |   \-testthat:::quasi_capture(...)
  4. |     +-testthat (local) .capture(...)
  5. |     | \-base::withCallingHandlers(...)
  6. |     \-rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  7. +-ael04_pre(syn_data) %&gt;% ael04_main()
  8. +-chevron::ael04_main(.)
  9. | \-chevron:::execute_with_args(...)
 10. |   \-chevron:::do_call(fun, args[intersect(names(args), formalArgs(fun))])
 11. |     \-base::do.call(what, new_args, envir = args_env)
 12. \-rlistings (local) `&lt;fn&gt;`(...)
 13.   \-tibble::as_tibble(df)</error>
    </testcase>
  </testsuite>
  <testsuite name="aet01" timestamp="2023-09-20T17:15:39Z" hostname="4f35574870e0" tests="9" skipped="4" failures="0" errors="0" time="2.811">
    <testcase time="0.585" classname="aet01" name="aet01_can_handle_all_NA_values"/>
    <testcase time="0.284" classname="aet01" name="aet01_can_handle_all_NA_values">
      <skipped message="Reason: On CRAN ('test-aet01.R:12:3')"/>
    </testcase>
    <testcase time="0.386" classname="aet01" name="aet01_can_handle_some_NA_values"/>
    <testcase time="0.286" classname="aet01" name="aet01_can_handle_some_NA_values">
      <skipped message="Reason: On CRAN ('test-aet01.R:29:3')"/>
    </testcase>
    <testcase time="0.295999999999999" classname="aet01" name="aet01_can_use_custom_anl_vars"/>
    <testcase time="0.16" classname="aet01" name="aet01_can_use_custom_anl_vars">
      <skipped message="Reason: On CRAN ('test-aet01.R:35:3')"/>
    </testcase>
    <testcase time="0.0949999999999998" classname="aet01" name="aet01_fails_on_incomplete_data_input"/>
    <testcase time="0.413" classname="aet01" name="aet01_can_use_custom_medconcept_var"/>
    <testcase time="0.306" classname="aet01" name="aet01_can_use_custom_medconcept_var">
      <skipped message="Reason: On CRAN ('test-aet01.R:65:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="aet01_aesi" timestamp="2023-09-20T17:15:42Z" hostname="4f35574870e0" tests="7" skipped="3" failures="0" errors="0" time="2.337">
    <testcase time="0.344" classname="aet01_aesi" name="aet01_aesi_can_handle_all_NA_values"/>
    <testcase time="0.306999999999999" classname="aet01_aesi" name="aet01_aesi_can_handle_all_NA_values">
      <skipped message="Reason: On CRAN ('test-aet01_aesi.R:17:3')"/>
    </testcase>
    <testcase time="0.313000000000001" classname="aet01_aesi" name="aet01_aesi_can_handle_some_NA_values"/>
    <testcase time="0.273" classname="aet01_aesi" name="aet01_aesi_can_handle_some_NA_values">
      <skipped message="Reason: On CRAN ('test-aet01_aesi.R:30:3')"/>
    </testcase>
    <testcase time="0.401999999999999" classname="aet01_aesi" name="aet01_aesi_works_with_ALL_argument"/>
    <testcase time="0.619" classname="aet01_aesi" name="aet01_aesi_works_with_ALL_argument">
      <skipped message="Reason: On CRAN ('test-aet01_aesi.R:36:3')"/>
    </testcase>
    <testcase time="0.0790000000000006" classname="aet01_aesi" name="aet01_aesi_check_fails_on_incomplete_data_input"/>
  </testsuite>
  <testsuite name="aet02" timestamp="2023-09-20T17:15:44Z" hostname="4f35574870e0" tests="3" skipped="1" failures="0" errors="0" time="2.183">
    <testcase time="0.072000000000001" classname="aet02" name="aet02_fails_on_incomplete_data_input"/>
    <testcase time="0.132999999999999" classname="aet02" name="aet02_handle_empty_data_input"/>
    <testcase time="1.978" classname="aet02" name="aet02_can_have_different_levels_of_row_split">
      <skipped message="Reason: On CRAN ('test-aet02.R:30:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="aet03" timestamp="2023-09-20T17:15:46Z" hostname="4f35574870e0" tests="4" skipped="2" failures="0" errors="0" time="3.435">
    <testcase time="0.432" classname="aet03" name="aet03_can_handle_NA_values"/>
    <testcase time="0.253" classname="aet03" name="aet03_can_handle_NA_values">
      <skipped message="Reason: On CRAN ('test-aet03.R:10:3')"/>
    </testcase>
    <testcase time="1.956" classname="aet03" name="aet03_can_handle_some_NA_values"/>
    <testcase time="0.794" classname="aet03" name="aet03_can_handle_some_NA_values">
      <skipped message="Reason: On CRAN ('test-aet03.R:27:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="aet04" timestamp="2023-09-20T17:15:50Z" hostname="4f35574870e0" tests="4" skipped="2" failures="0" errors="0" time="5.59">
    <testcase time="0.640000000000001" classname="aet04" name="aet04_can_handle_NA_values"/>
    <testcase time="0.422999999999998" classname="aet04" name="aet04_can_handle_NA_values">
      <skipped message="Reason: On CRAN ('test-aet04.R:10:3')"/>
    </testcase>
    <testcase time="3.326" classname="aet04" name="aet04_can_handle_some_NA_values"/>
    <testcase time="1.201" classname="aet04" name="aet04_can_handle_some_NA_values">
      <skipped message="Reason: On CRAN ('test-aet04.R:32:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="aet05" timestamp="2023-09-20T17:15:55Z" hostname="4f35574870e0" tests="4" skipped="2" failures="0" errors="0" time="0.939">
    <testcase time="0.208000000000002" classname="aet05" name="aet05_can_handle_NA_values"/>
    <testcase time="0.254999999999999" classname="aet05" name="aet05_can_handle_NA_values">
      <skipped message="Reason: On CRAN ('test-aet05.R:7:3')"/>
    </testcase>
    <testcase time="0.195999999999998" classname="aet05" name="aet05_can_handle_some_NA_values"/>
    <testcase time="0.280000000000001" classname="aet05" name="aet05_can_handle_some_NA_values">
      <skipped message="Reason: On CRAN ('test-aet05.R:24:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="aet05_all" timestamp="2023-09-20T17:15:56Z" hostname="4f35574870e0" tests="4" skipped="2" failures="0" errors="0" time="0.954">
    <testcase time="0.210999999999999" classname="aet05_all" name="aet05_all_can_handle_NA_values"/>
    <testcase time="0.256" classname="aet05_all" name="aet05_all_can_handle_NA_values">
      <skipped message="Reason: On CRAN ('test-aet05_all.R:7:3')"/>
    </testcase>
    <testcase time="0.208000000000002" classname="aet05_all" name="aet05_all_can_handle_some_NA_values"/>
    <testcase time="0.279" classname="aet05_all" name="aet05_all_can_handle_some_NA_values">
      <skipped message="Reason: On CRAN ('test-aet05_all.R:21:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="aet10" timestamp="2023-09-20T17:15:57Z" hostname="4f35574870e0" tests="4" skipped="2" failures="0" errors="0" time="0.544">
    <testcase time="0.0940000000000012" classname="aet10" name="aet10_can_handle_NA_values"/>
    <testcase time="0.0999999999999979" classname="aet10" name="aet10_can_handle_NA_values">
      <skipped message="Reason: On CRAN ('test-aet10.R:10:3')"/>
    </testcase>
    <testcase time="0.138000000000002" classname="aet10" name="aet10_can_handle_some_NA_values"/>
    <testcase time="0.212" classname="aet10" name="aet10_can_handle_some_NA_values">
      <skipped message="Reason: On CRAN ('test-aet10.R:24:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="assertions" timestamp="2023-09-20T17:15:58Z" hostname="4f35574870e0" tests="38" skipped="0" failures="0" errors="0" time="0.245">
    <testcase time="0.0229999999999997" classname="assertions" name="assert_one_tablenames_works_as_expected"/>
    <testcase time="0.00199999999999889" classname="assertions" name="assert_one_tablenames_works_as_expected"/>
    <testcase time="0.00499999999999901" classname="assertions" name="assert_one_tablenames_works_as_expected"/>
    <testcase time="0.00600000000000023" classname="assertions" name="assert_one_tablenames_works_as_expected"/>
    <testcase time="0.00700000000000145" classname="assertions" name="assert_all_tablenames_works_as_expected"/>
    <testcase time="0.00600000000000023" classname="assertions" name="assert_all_tablenames_works_as_expected"/>
    <testcase time="0.00499999999999901" classname="assertions" name="assert_all_tablenames_works_as_expected"/>
    <testcase time="0.00799999999999912" classname="assertions" name="assert_valid_var.character_works_as_expected"/>
    <testcase time="0.00600000000000023" classname="assertions" name="assert_valid_var.character_works_as_expected"/>
    <testcase time="0.00500000000000256" classname="assertions" name="assert_valid_var.character_works_as_expected"/>
    <testcase time="0.00600000000000023" classname="assertions" name="assert_valid_var.character_works_as_expected"/>
    <testcase time="0.00199999999999889" classname="assertions" name="assert_valid_var.character_works_as_expected"/>
    <testcase time="0.00799999999999912" classname="assertions" name="assert_valid_var.factor_works_as_expected"/>
    <testcase time="0.00600000000000023" classname="assertions" name="assert_valid_var.factor_works_as_expected"/>
    <testcase time="0.00600000000000023" classname="assertions" name="assert_valid_var.factor_works_as_expected"/>
    <testcase time="0.00499999999999901" classname="assertions" name="assert_valid_var.factor_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="assertions" name="assert_valid_var.factor_works_as_expected"/>
    <testcase time="0.00700000000000145" classname="assertions" name="assert_valid_var.logical_works_as_expected"/>
    <testcase time="0.00600000000000023" classname="assertions" name="assert_valid_var.logical_works_as_expected"/>
    <testcase time="0.00600000000000023" classname="assertions" name="assert_valid_var.logical_works_as_expected"/>
    <testcase time="0.00199999999999889" classname="assertions" name="assert_valid_var.logical_works_as_expected"/>
    <testcase time="0.00700000000000145" classname="assertions" name="assert_valid_var.numeric_works_as_expected"/>
    <testcase time="0.00600000000000023" classname="assertions" name="assert_valid_var.numeric_works_as_expected"/>
    <testcase time="0.00599999999999667" classname="assertions" name="assert_valid_var.numeric_works_as_expected"/>
    <testcase time="0.00200000000000244" classname="assertions" name="assert_valid_var.numeric_works_as_expected"/>
    <testcase time="0.00600000000000023" classname="assertions" name="assert_valid_var.numeric_works_as_expected"/>
    <testcase time="0.00199999999999889" classname="assertions" name="assert_valid_var.numeric_works_as_expected"/>
    <testcase time="0.00799999999999912" classname="assertions" name="assert_valid_variable_works_as_expected"/>
    <testcase time="0.00200000000000244" classname="assertions" name="assert_valid_variable_works_as_expected"/>
    <testcase time="0.00999999999999801" classname="assertions" name="assert_valid_variable_works_as_expected"/>
    <testcase time="0.00199999999999889" classname="assertions" name="assert_valid_variable_works_as_expected"/>
    <testcase time="0.0100000000000016" classname="assertions" name="assert_valid_variable_works_as_expected"/>
    <testcase time="0.00199999999999889" classname="assertions" name="assert_valid_variable_works_as_expected"/>
    <testcase time="0.0160000000000018" classname="assertions" name="assert_valid_var_pair_works_as_expected_with_character"/>
    <testcase time="0.00999999999999801" classname="assertions" name="assert_valid_var_pair_works_as_expected_with_character"/>
    <testcase time="0.0110000000000028" classname="assertions" name="assert_valid_var_pair_works_as_expected_with_factor"/>
    <testcase time="0.00799999999999912" classname="assertions" name="assert_valid_var_pair_works_as_expected_with_factor"/>
    <testcase time="0.0069999999999979" classname="assertions" name="assert_valid_var_pair_works_as_expected_with_factor"/>
  </testsuite>
  <testsuite name="cfbt01" timestamp="2023-09-20T17:15:58Z" hostname="4f35574870e0" tests="3" skipped="2" failures="0" errors="0" time="11.63">
    <testcase time="8.644" classname="cfbt01" name="cfbt01_functions_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-cfbt01.R:7:3')"/>
    </testcase>
    <testcase time="1.258" classname="cfbt01" name="cfbt01_can_handle_n_0_and_outputs_NE_instead_of_infs_and_NAs"/>
    <testcase time="1.728" classname="cfbt01" name="cfbt01_can_handle_n_0_and_outputs_NE_instead_of_infs_and_NAs">
      <skipped message="Reason: On CRAN ('test-cfbt01.R:22:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="checks" timestamp="2023-09-20T17:16:09Z" hostname="4f35574870e0" tests="8" skipped="0" failures="0" errors="0" time="0.064">
    <testcase time="0.0300000000000011" classname="checks" name="check_all_colnames_works_as_expected"/>
    <testcase time="0.00500000000000256" classname="checks" name="check_all_colnames_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="checks" name="check_all_colnames_works_as_expected"/>
    <testcase time="0.00499999999999545" classname="checks" name="check_all_colnames_works_as_expected"/>
    <testcase time="0.0100000000000051" classname="checks" name="check_one_colnames_works_as_expected"/>
    <testcase time="0.00499999999999545" classname="checks" name="check_one_colnames_works_as_expected"/>
    <testcase time="0.00200000000000244" classname="checks" name="check_one_colnames_works_as_expected"/>
    <testcase time="0.00399999999999778" classname="checks" name="check_one_colnames_works_as_expected"/>
  </testsuite>
  <testsuite name="chevron_tlg-class" timestamp="2023-09-20T17:16:10Z" hostname="4f35574870e0" tests="24" skipped="0" failures="0" errors="0" time="0.101">
    <testcase time="0.0129999999999981" classname="chevron_tlg_class" name="chevron_t_object_can_be_constructed_with_default_values"/>
    <testcase time="0.00500000000000256" classname="chevron_tlg_class" name="chevron_t_object_can_be_constructed_with_default_values"/>
    <testcase time="0.00800000000000267" classname="chevron_tlg_class" name="chevron_t_object_can_be_constructed_with_custom_values"/>
    <testcase time="0.00499999999999545" classname="chevron_tlg_class" name="chevron_t_object_can_be_constructed_with_custom_values"/>
    <testcase time="0.00300000000000011" classname="chevron_tlg_class" name="chevron_t_object_can_be_constructed_with_custom_values"/>
    <testcase time="0.00400000000000489" classname="chevron_tlg_class" name="chevron_t_object_can_be_constructed_with_custom_values"/>
    <testcase time="0.00900000000000034" classname="chevron_tlg_class" name="chevron_t_constructor_returns_an_error_when_expected"/>
    <testcase time="0.000999999999997669" classname="chevron_tlg_class" name="chevron_t_constructor_returns_an_error_when_expected"/>
    <testcase time="0.000999999999997669" classname="chevron_tlg_class" name="chevron_t_constructor_returns_an_error_when_expected"/>
    <testcase time="0.00100000000000477" classname="chevron_tlg_class" name="chevron_t_constructor_returns_an_error_when_expected"/>
    <testcase time="0.000999999999997669" classname="chevron_tlg_class" name="chevron_t_constructor_returns_an_error_when_expected"/>
    <testcase time="0.00200000000000244" classname="chevron_tlg_class" name="chevron_t_constructor_returns_an_error_when_expected"/>
    <testcase time="0.00900000000000034" classname="chevron_tlg_class" name="chevron_l_object_can_be_constructed_with_default_values"/>
    <testcase time="0.00399999999999778" classname="chevron_tlg_class" name="chevron_l_object_can_be_constructed_with_default_values"/>
    <testcase time="0.00999999999999801" classname="chevron_tlg_class" name="chevron_g_object_can_be_constructed_with_custom_values"/>
    <testcase time="0.00399999999999778" classname="chevron_tlg_class" name="chevron_g_object_can_be_constructed_with_custom_values"/>
    <testcase time="0.00300000000000011" classname="chevron_tlg_class" name="chevron_g_object_can_be_constructed_with_custom_values"/>
    <testcase time="0.00400000000000489" classname="chevron_tlg_class" name="chevron_g_object_can_be_constructed_with_custom_values"/>
    <testcase time="0.00900000000000034" classname="chevron_tlg_class" name="chevron_g_constructor_returns_an_error_when_expected"/>
    <testcase time="0.000999999999997669" classname="chevron_tlg_class" name="chevron_g_constructor_returns_an_error_when_expected"/>
    <testcase time="0.000999999999997669" classname="chevron_tlg_class" name="chevron_g_constructor_returns_an_error_when_expected"/>
    <testcase time="0.00100000000000477" classname="chevron_tlg_class" name="chevron_g_constructor_returns_an_error_when_expected"/>
    <testcase time="0.000999999999997669" classname="chevron_tlg_class" name="chevron_g_constructor_returns_an_error_when_expected"/>
    <testcase time="0.000999999999997669" classname="chevron_tlg_class" name="chevron_g_constructor_returns_an_error_when_expected"/>
  </testsuite>
  <testsuite name="chevron_tlg-methods" timestamp="2023-09-20T17:16:10Z" hostname="4f35574870e0" tests="30" skipped="9" failures="0" errors="0" time="11.002">
    <testcase time="4.33900000000001" classname="chevron_tlg_methods" name="run_works_as_expected_for_chevron_t_object">
      <skipped message="Reason: On CRAN ('test-chevron_tlg-methods.R:5:3')"/>
    </testcase>
    <testcase time="0.762999999999998" classname="chevron_tlg_methods" name="run_works_as_expected_for_chevron_t_object_when_auto_pre_FALSE">
      <skipped message="Reason: On CRAN ('test-chevron_tlg-methods.R:13:3')"/>
    </testcase>
    <testcase time="0.964999999999996" classname="chevron_tlg_methods" name="run_works_as_expected_with_argument_printed">
      <skipped message="Reason: On CRAN ('test-chevron_tlg-methods.R:18:3')"/>
    </testcase>
    <testcase time="1.041" classname="chevron_tlg_methods" name="run_works_as_expected_with_argument_printed_if_the_user_argument_is_complicated">
      <skipped message="Reason: On CRAN ('test-chevron_tlg-methods.R:25:3')"/>
    </testcase>
    <testcase time="0.731999999999999" classname="chevron_tlg_methods" name="run_works_as_expected_with_partial_match_argument">
      <skipped message="Reason: On CRAN ('test-chevron_tlg-methods.R:31:3')"/>
    </testcase>
    <testcase time="0.0210000000000008" classname="chevron_tlg_methods" name="args_ls_works_as_expected"/>
    <testcase time="0.00200000000000244" classname="chevron_tlg_methods" name="args_ls_works_as_expected"/>
    <testcase time="0.000999999999997669" classname="chevron_tlg_methods" name="args_ls_works_as_expected"/>
    <testcase time="0.00800000000000267" classname="chevron_tlg_methods" name="args_ls_works_as_expected_when_simplify_is_TRUE"/>
    <testcase time="0.000999999999997669" classname="chevron_tlg_methods" name="args_ls_works_as_expected_when_simplify_is_TRUE"/>
    <testcase time="0.000999999999997669" classname="chevron_tlg_methods" name="args_ls_works_as_expected_when_simplify_is_TRUE"/>
    <testcase time="0.00800000000000267" classname="chevron_tlg_methods" name="args_ls_works_as_expected_with_custom_chevron_tlg_object"/>
    <testcase time="0.000999999999997669" classname="chevron_tlg_methods" name="args_ls_works_as_expected_with_custom_chevron_tlg_object"/>
    <testcase time="0.00100000000000477" classname="chevron_tlg_methods" name="args_ls_works_as_expected_with_custom_chevron_tlg_object"/>
    <testcase time="0.00399999999999778" classname="chevron_tlg_methods" name="args_ls_works_as_expected_with_custom_chevron_tlg_object"/>
    <testcase time="0.00999999999999801" classname="chevron_tlg_methods" name="main_works_as_expected"/>
    <testcase time="0.0100000000000051" classname="chevron_tlg_methods" name="main_setter_works_as_expected"/>
    <testcase time="0.0149999999999935" classname="chevron_tlg_methods" name="main_setter_throw_an_error_as_expected"/>
    <testcase time="0.0100000000000051" classname="chevron_tlg_methods" name="preprocess_works_as_expected"/>
    <testcase time="0.00999999999999801" classname="chevron_tlg_methods" name="preprocess_setter_works_as_expected"/>
    <testcase time="0.0150000000000006" classname="chevron_tlg_methods" name="preprocess_sends_an_error_as_expected"/>
    <testcase time="0.00900000000000034" classname="chevron_tlg_methods" name="postprocess_works_as_expected"/>
    <testcase time="0.00999999999999801" classname="chevron_tlg_methods" name="postprocess_setter_works_as_expected"/>
    <testcase time="0.0150000000000006" classname="chevron_tlg_methods" name="postprocess_sends_an_error_as_expected"/>
    <testcase time="0.00600000000000023" classname="chevron_tlg_methods" name="script_funs_works_as_expected_in_interactive_mode">
      <skipped message="Reason: !interactive() is TRUE ('test-chevron_tlg-methods.R:146:3')"/>
    </testcase>
    <testcase time="0.017000000000003" classname="chevron_tlg_methods" name="script_funs_works_as_expected"/>
    <testcase time="0.000999999999997669" classname="chevron_tlg_methods" name="script_funs_works_as_expected"/>
    <testcase time="2.934" classname="chevron_tlg_methods" name="script_funs_generates_a_valid_script">
      <skipped message="Reason: On CRAN ('test-chevron_tlg-methods.R:167:3')"/>
    </testcase>
    <testcase time="0.0279999999999987" classname="chevron_tlg_methods" name="print_list_works">
      <skipped message="Reason: On CRAN ('test-chevron_tlg-methods.R:175:3')"/>
    </testcase>
    <testcase time="0.0240000000000009" classname="chevron_tlg_methods" name="print_list_works_for_empty_list">
      <skipped message="Reason: On CRAN ('test-chevron_tlg-methods.R:179:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="cml02a_gl" timestamp="2023-09-20T17:16:21Z" hostname="4f35574870e0" tests="3" skipped="0" failures="0" errors="3" time="0.144">
    <testcase time="0.0449999999999946" classname="cml02a_gl" name="cml02a_gl_works_with_adcm_dataset">
      <error type="error" message="Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL,  ('test-cml02a_gl.R:4:3')">Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL, 
    unique_rows = FALSE, default_formatting = list(all = fmt_config()), 
    col_formatting = NULL, main_title = NULL, subtitles = NULL, 
    main_footer = NULL, prov_footer = NULL) 
{
    if (length(non_disp_cols) &gt; 0 &amp;&amp; length(intersect(key_cols, 
        non_disp_cols)) &gt; 0) {
        stop("Key column also listed in non_disp_cols. All key columns are by", 
            " definition display columns.")
    }
    if (!is.null(disp_cols) &amp;&amp; !is.null(non_disp_cols)) {
        stop("Got non-null values for both disp_cols and non_disp_cols. This is not supported.")
    }
    else if (is.null(disp_cols)) {
        cols &lt;- setdiff(names(df), c(key_cols, non_disp_cols))
    }
    else {
        cols &lt;- disp_cols
    }
    if (!all(sapply(default_formatting, is, class2 = "fmt_config"))) {
        stop("All format configurations supplied in `default_formatting`", 
            " must be of type `fmt_config`.")
    }
    if (!(is.null(col_formatting) || all(sapply(col_formatting, 
        is, class2 = "fmt_config")))) {
        stop("All format configurations supplied in `col_formatting`", 
            " must be of type `fmt_config`.")
    }
    df &lt;- as_tibble(df)
    varlabs &lt;- var_labels(df, fill = TRUE)
    o &lt;- do.call(order, df[key_cols])
    if (is.unsorted(o)) {
        message("sorting incoming data by key columns")
        df &lt;- df[o, ]
    }
    ordercols &lt;- c(key_cols, setdiff(names(df), key_cols))
    df &lt;- df[, ordercols]
    var_labels(df) &lt;- varlabs[ordercols]
    for (cnm in key_cols) {
        df[[cnm]] &lt;- as_keycol(df[[cnm]])
    }
    cols &lt;- c(key_cols, setdiff(cols, key_cols))
    df[cols] &lt;- lapply(cols, function(col) {
        col_class &lt;- tail(class(df[[col]]), 1)
        col_fmt_class &lt;- if (!col_class %in% names(default_formatting) &amp;&amp; 
            is.numeric(df[[col]])) 
            "numeric"
        else col_class
        col_fmt &lt;- if (col %in% names(col_formatting)) {
            col_formatting[[col]]
        }
        else if (col_fmt_class %in% names(default_formatting)) {
            default_formatting[[col_fmt_class]]
        }
        else {
            if (!"all" %in% names(default_formatting)) {
                stop("Format configurations must be supplied for all listing columns. ", 
                  "To cover all remaining columns please add an 'all' configuration", 
                  " to `default_formatting`.")
            }
            default_formatting[["all"]]
        }
        obj_format(df[[col]]) &lt;- obj_format(col_fmt)
        obj_na_str(df[[col]]) &lt;- if (is.null(obj_na_str(col_fmt))) 
            "NA"
        else obj_na_str(col_fmt)
        obj_align(df[[col]]) &lt;- if (is.null(obj_align(col_fmt))) 
            "left"
        else obj_align(col_fmt)
        df[[col]]
    })
    if (unique_rows) 
        df &lt;- df[!duplicated(df[, cols]), ]
    class(df) &lt;- c("listing_df", class(df))
    main_title(df) &lt;- main_title
    main_footer(df) &lt;- main_footer
    subtitles(df) &lt;- subtitles
    prov_footer(df) &lt;- prov_footer
    listing_dispcols(df) &lt;- cols
    df
})(key_cols = key_cols, disp_cols = disp_cols, default_formatting = default_formatting, 
    unique_rows = unique_rows)`: argument "df" is missing, with no default
Backtrace:
     x
  1. +-testthat::expect_message(res &lt;- run(cml02a_gl, syn_data)) at test-cml02a_gl.R:4:2
  2. | \-testthat:::expect_condition_matching(...)
  3. |   \-testthat:::quasi_capture(...)
  4. |     +-testthat (local) .capture(...)
  5. |     | \-base::withCallingHandlers(...)
  6. |     \-rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  7. +-chevron::run(cml02a_gl, syn_data)
  8. +-chevron::run(cml02a_gl, syn_data)
  9. | \-chevron:::do_call(object@main, c(proc_data, user_args))
 10. |   \-base::do.call(what, new_args, envir = args_env)
 11. +-chevron (local) `&lt;fn&gt;`(adam_db = adam_db)
 12. | \-chevron:::execute_with_args(...)
 13. |   \-chevron:::do_call(fun, args[intersect(names(args), formalArgs(fun))])
 14. |     \-base::do.call(what, new_args, envir = args_env)
 15. \-rlistings (local) `&lt;fn&gt;`(...)
 16.   \-tibble::as_tibble(df)</error>
    </testcase>
    <testcase time="0.0500000000000043" classname="cml02a_gl" name="cml02a_gl_works_with_missing_data">
      <error type="error" message="Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL,  ('test-cml02a_gl.R:11:3')">Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL, 
    unique_rows = FALSE, default_formatting = list(all = fmt_config()), 
    col_formatting = NULL, main_title = NULL, subtitles = NULL, 
    main_footer = NULL, prov_footer = NULL) 
{
    if (length(non_disp_cols) &gt; 0 &amp;&amp; length(intersect(key_cols, 
        non_disp_cols)) &gt; 0) {
        stop("Key column also listed in non_disp_cols. All key columns are by", 
            " definition display columns.")
    }
    if (!is.null(disp_cols) &amp;&amp; !is.null(non_disp_cols)) {
        stop("Got non-null values for both disp_cols and non_disp_cols. This is not supported.")
    }
    else if (is.null(disp_cols)) {
        cols &lt;- setdiff(names(df), c(key_cols, non_disp_cols))
    }
    else {
        cols &lt;- disp_cols
    }
    if (!all(sapply(default_formatting, is, class2 = "fmt_config"))) {
        stop("All format configurations supplied in `default_formatting`", 
            " must be of type `fmt_config`.")
    }
    if (!(is.null(col_formatting) || all(sapply(col_formatting, 
        is, class2 = "fmt_config")))) {
        stop("All format configurations supplied in `col_formatting`", 
            " must be of type `fmt_config`.")
    }
    df &lt;- as_tibble(df)
    varlabs &lt;- var_labels(df, fill = TRUE)
    o &lt;- do.call(order, df[key_cols])
    if (is.unsorted(o)) {
        message("sorting incoming data by key columns")
        df &lt;- df[o, ]
    }
    ordercols &lt;- c(key_cols, setdiff(names(df), key_cols))
    df &lt;- df[, ordercols]
    var_labels(df) &lt;- varlabs[ordercols]
    for (cnm in key_cols) {
        df[[cnm]] &lt;- as_keycol(df[[cnm]])
    }
    cols &lt;- c(key_cols, setdiff(cols, key_cols))
    df[cols] &lt;- lapply(cols, function(col) {
        col_class &lt;- tail(class(df[[col]]), 1)
        col_fmt_class &lt;- if (!col_class %in% names(default_formatting) &amp;&amp; 
            is.numeric(df[[col]])) 
            "numeric"
        else col_class
        col_fmt &lt;- if (col %in% names(col_formatting)) {
            col_formatting[[col]]
        }
        else if (col_fmt_class %in% names(default_formatting)) {
            default_formatting[[col_fmt_class]]
        }
        else {
            if (!"all" %in% names(default_formatting)) {
                stop("Format configurations must be supplied for all listing columns. ", 
                  "To cover all remaining columns please add an 'all' configuration", 
                  " to `default_formatting`.")
            }
            default_formatting[["all"]]
        }
        obj_format(df[[col]]) &lt;- obj_format(col_fmt)
        obj_na_str(df[[col]]) &lt;- if (is.null(obj_na_str(col_fmt))) 
            "NA"
        else obj_na_str(col_fmt)
        obj_align(df[[col]]) &lt;- if (is.null(obj_align(col_fmt))) 
            "left"
        else obj_align(col_fmt)
        df[[col]]
    })
    if (unique_rows) 
        df &lt;- df[!duplicated(df[, cols]), ]
    class(df) &lt;- c("listing_df", class(df))
    main_title(df) &lt;- main_title
    main_footer(df) &lt;- main_footer
    subtitles(df) &lt;- subtitles
    prov_footer(df) &lt;- prov_footer
    listing_dispcols(df) &lt;- cols
    df
})(key_cols = key_cols, disp_cols = disp_cols, default_formatting = default_formatting, 
    unique_rows = unique_rows)`: argument "df" is missing, with no default
Backtrace:
     x
  1. +-testthat::expect_message(res &lt;- run(cml02a_gl, proc_data)) at test-cml02a_gl.R:11:2
  2. | \-testthat:::expect_condition_matching(...)
  3. |   \-testthat:::quasi_capture(...)
  4. |     +-testthat (local) .capture(...)
  5. |     | \-base::withCallingHandlers(...)
  6. |     \-rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  7. +-chevron::run(cml02a_gl, proc_data)
  8. +-chevron::run(cml02a_gl, proc_data)
  9. | \-chevron:::do_call(object@main, c(proc_data, user_args))
 10. |   \-base::do.call(what, new_args, envir = args_env)
 11. +-chevron (local) `&lt;fn&gt;`(adam_db = adam_db)
 12. | \-chevron:::execute_with_args(...)
 13. |   \-chevron:::do_call(fun, args[intersect(names(args), formalArgs(fun))])
 14. |     \-base::do.call(what, new_args, envir = args_env)
 15. \-rlistings (local) `&lt;fn&gt;`(...)
 16.   \-tibble::as_tibble(df)</error>
    </testcase>
    <testcase time="0.0489999999999995" classname="cml02a_gl" name="cml02a_gl_functions_work_as_expected">
      <error type="error" message="Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL,  ('test-cml02a_gl.R:18:3')">Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL, 
    unique_rows = FALSE, default_formatting = list(all = fmt_config()), 
    col_formatting = NULL, main_title = NULL, subtitles = NULL, 
    main_footer = NULL, prov_footer = NULL) 
{
    if (length(non_disp_cols) &gt; 0 &amp;&amp; length(intersect(key_cols, 
        non_disp_cols)) &gt; 0) {
        stop("Key column also listed in non_disp_cols. All key columns are by", 
            " definition display columns.")
    }
    if (!is.null(disp_cols) &amp;&amp; !is.null(non_disp_cols)) {
        stop("Got non-null values for both disp_cols and non_disp_cols. This is not supported.")
    }
    else if (is.null(disp_cols)) {
        cols &lt;- setdiff(names(df), c(key_cols, non_disp_cols))
    }
    else {
        cols &lt;- disp_cols
    }
    if (!all(sapply(default_formatting, is, class2 = "fmt_config"))) {
        stop("All format configurations supplied in `default_formatting`", 
            " must be of type `fmt_config`.")
    }
    if (!(is.null(col_formatting) || all(sapply(col_formatting, 
        is, class2 = "fmt_config")))) {
        stop("All format configurations supplied in `col_formatting`", 
            " must be of type `fmt_config`.")
    }
    df &lt;- as_tibble(df)
    varlabs &lt;- var_labels(df, fill = TRUE)
    o &lt;- do.call(order, df[key_cols])
    if (is.unsorted(o)) {
        message("sorting incoming data by key columns")
        df &lt;- df[o, ]
    }
    ordercols &lt;- c(key_cols, setdiff(names(df), key_cols))
    df &lt;- df[, ordercols]
    var_labels(df) &lt;- varlabs[ordercols]
    for (cnm in key_cols) {
        df[[cnm]] &lt;- as_keycol(df[[cnm]])
    }
    cols &lt;- c(key_cols, setdiff(cols, key_cols))
    df[cols] &lt;- lapply(cols, function(col) {
        col_class &lt;- tail(class(df[[col]]), 1)
        col_fmt_class &lt;- if (!col_class %in% names(default_formatting) &amp;&amp; 
            is.numeric(df[[col]])) 
            "numeric"
        else col_class
        col_fmt &lt;- if (col %in% names(col_formatting)) {
            col_formatting[[col]]
        }
        else if (col_fmt_class %in% names(default_formatting)) {
            default_formatting[[col_fmt_class]]
        }
        else {
            if (!"all" %in% names(default_formatting)) {
                stop("Format configurations must be supplied for all listing columns. ", 
                  "To cover all remaining columns please add an 'all' configuration", 
                  " to `default_formatting`.")
            }
            default_formatting[["all"]]
        }
        obj_format(df[[col]]) &lt;- obj_format(col_fmt)
        obj_na_str(df[[col]]) &lt;- if (is.null(obj_na_str(col_fmt))) 
            "NA"
        else obj_na_str(col_fmt)
        obj_align(df[[col]]) &lt;- if (is.null(obj_align(col_fmt))) 
            "left"
        else obj_align(col_fmt)
        df[[col]]
    })
    if (unique_rows) 
        df &lt;- df[!duplicated(df[, cols]), ]
    class(df) &lt;- c("listing_df", class(df))
    main_title(df) &lt;- main_title
    main_footer(df) &lt;- main_footer
    subtitles(df) &lt;- subtitles
    prov_footer(df) &lt;- prov_footer
    listing_dispcols(df) &lt;- cols
    df
})(key_cols = key_cols, disp_cols = disp_cols, default_formatting = default_formatting, 
    unique_rows = unique_rows)`: argument "df" is missing, with no default
Backtrace:
     x
  1. +-testthat::expect_message(res &lt;- cml02a_gl_pre(syn_data) %&gt;% cml02a_gl_main()) at test-cml02a_gl.R:18:2
  2. | \-testthat:::expect_condition_matching(...)
  3. |   \-testthat:::quasi_capture(...)
  4. |     +-testthat (local) .capture(...)
  5. |     | \-base::withCallingHandlers(...)
  6. |     \-rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  7. +-cml02a_gl_pre(syn_data) %&gt;% cml02a_gl_main()
  8. +-chevron::cml02a_gl_main(.)
  9. | \-chevron:::execute_with_args(...)
 10. |   \-chevron:::do_call(fun, args[intersect(names(args), formalArgs(fun))])
 11. |     \-base::do.call(what, new_args, envir = args_env)
 12. \-rlistings (local) `&lt;fn&gt;`(...)
 13.   \-tibble::as_tibble(df)</error>
    </testcase>
  </testsuite>
  <testsuite name="cmt01a" timestamp="2023-09-20T17:16:21Z" hostname="4f35574870e0" tests="6" skipped="4" failures="0" errors="0" time="4.622">
    <testcase time="1.412" classname="cmt01a" name="cmt01a_functions_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-cmt01a.R:7:3')"/>
    </testcase>
    <testcase time="1.314" classname="cmt01a" name="cmt01a_functions_with_custom_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-cmt01a.R:19:3')"/>
    </testcase>
    <testcase time="0.213000000000001" classname="cmt01a" name="cmt01a_can_handle_all_NA_values"/>
    <testcase time="0.163000000000004" classname="cmt01a" name="cmt01a_can_handle_all_NA_values">
      <skipped message="Reason: On CRAN ('test-cmt01a.R:33:3')"/>
    </testcase>
    <testcase time="0.872999999999998" classname="cmt01a" name="cmt01a_can_handle_some_NA_values"/>
    <testcase time="0.646999999999998" classname="cmt01a" name="cmt01a_can_handle_some_NA_values">
      <skipped message="Reason: On CRAN ('test-cmt01a.R:41:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="cmt02_pt" timestamp="2023-09-20T17:16:25Z" hostname="4f35574870e0" tests="4" skipped="2" failures="0" errors="0" time="0.723">
    <testcase time="0.149999999999999" classname="cmt02_pt" name="cmt02_pt_can_handle_all_NA_values"/>
    <testcase time="0.133000000000003" classname="cmt02_pt" name="cmt02_pt_can_handle_all_NA_values">
      <skipped message="Reason: On CRAN ('test-cmt02_pt.R:9:3')"/>
    </testcase>
    <testcase time="0.207999999999998" classname="cmt02_pt" name="cmt02_pt_can_handle_some_NA_values"/>
    <testcase time="0.231999999999999" classname="cmt02_pt" name="cmt02_pt_can_handle_some_NA_values">
      <skipped message="Reason: On CRAN ('test-cmt02_pt.R:17:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="coxt01" timestamp="2023-09-20T17:16:26Z" hostname="4f35574870e0" tests="3" skipped="1" failures="0" errors="0" time="0.635">
    <testcase time="0.420000000000002" classname="coxt01" name="coxt01_can_handle_some_NA_values"/>
    <testcase time="0.186" classname="coxt01" name="coxt01_can_handle_some_NA_values">
      <skipped message="Reason: On CRAN ('test-coxt01.R:6:3')"/>
    </testcase>
    <testcase time="0.0289999999999964" classname="coxt01" name="coxt01_fails_on_incomlete_data"/>
  </testsuite>
  <testsuite name="coxt02" timestamp="2023-09-20T17:16:27Z" hostname="4f35574870e0" tests="3" skipped="1" failures="0" errors="0" time="0.849">
    <testcase time="0.584000000000003" classname="coxt02" name="coxt02_can_handle_some_NA_values"/>
    <testcase time="0.235999999999997" classname="coxt02" name="coxt02_can_handle_some_NA_values">
      <skipped message="Reason: On CRAN ('test-coxt02.R:5:3')"/>
    </testcase>
    <testcase time="0.0290000000000035" classname="coxt02" name="coxt02_fails_on_incomlete_data"/>
  </testsuite>
  <testsuite name="default_tlg" timestamp="2023-09-20T17:16:28Z" hostname="4f35574870e0" tests="15" skipped="15" failures="0" errors="0" time="14.499">
    <testcase time="0.137999999999998" classname="default_tlg" name="ael01_nollt_function_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-default_tlg.R:5:3')"/>
    </testcase>
    <testcase time="0.655000000000001" classname="default_tlg" name="aet01_function_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-default_tlg.R:12:3')"/>
    </testcase>
    <testcase time="0.619999999999997" classname="default_tlg" name="aet01_aesi_function_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-default_tlg.R:19:3')"/>
    </testcase>
    <testcase time="1.244" classname="default_tlg" name="aet02_functions_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-default_tlg.R:26:3')"/>
    </testcase>
    <testcase time="2.863" classname="default_tlg" name="aet03_functions_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-default_tlg.R:33:3')"/>
    </testcase>
    <testcase time="4.268" classname="default_tlg" name="aet04_functions_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-default_tlg.R:40:3')"/>
    </testcase>
    <testcase time="0.487000000000002" classname="default_tlg" name="aet05_functions_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-default_tlg.R:47:3')"/>
    </testcase>
    <testcase time="0.493000000000002" classname="default_tlg" name="aet05_all_functions_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-default_tlg.R:54:3')"/>
    </testcase>
    <testcase time="0.356999999999999" classname="default_tlg" name="aet10_functions_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-default_tlg.R:61:3')"/>
    </testcase>
    <testcase time="0.426000000000002" classname="default_tlg" name="cmt02_pt_functions_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-default_tlg.R:68:3')"/>
    </testcase>
    <testcase time="0.570999999999998" classname="default_tlg" name="coxt01_functions_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-default_tlg.R:78:3')"/>
    </testcase>
    <testcase time="0.828999999999994" classname="default_tlg" name="coxt02_functions_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-default_tlg.R:86:3')"/>
    </testcase>
    <testcase time="0.763000000000005" classname="default_tlg" name="dmt01_functions_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-default_tlg.R:93:3')"/>
    </testcase>
    <testcase time="0.488" classname="default_tlg" name="dst01_functions_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-default_tlg.R:100:3')"/>
    </testcase>
    <testcase time="0.296999999999997" classname="default_tlg" name="dtht01_functions_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-default_tlg.R:107:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="dml01" timestamp="2023-09-20T17:16:42Z" hostname="4f35574870e0" tests="2" skipped="0" failures="0" errors="2" time="0.091">
    <testcase time="0.0499999999999972" classname="dml01" name="dml01_works_with_adsl_dataset">
      <error type="error" message="Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL,  ('test-dml01.R:4:3')">Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL, 
    unique_rows = FALSE, default_formatting = list(all = fmt_config()), 
    col_formatting = NULL, main_title = NULL, subtitles = NULL, 
    main_footer = NULL, prov_footer = NULL) 
{
    if (length(non_disp_cols) &gt; 0 &amp;&amp; length(intersect(key_cols, 
        non_disp_cols)) &gt; 0) {
        stop("Key column also listed in non_disp_cols. All key columns are by", 
            " definition display columns.")
    }
    if (!is.null(disp_cols) &amp;&amp; !is.null(non_disp_cols)) {
        stop("Got non-null values for both disp_cols and non_disp_cols. This is not supported.")
    }
    else if (is.null(disp_cols)) {
        cols &lt;- setdiff(names(df), c(key_cols, non_disp_cols))
    }
    else {
        cols &lt;- disp_cols
    }
    if (!all(sapply(default_formatting, is, class2 = "fmt_config"))) {
        stop("All format configurations supplied in `default_formatting`", 
            " must be of type `fmt_config`.")
    }
    if (!(is.null(col_formatting) || all(sapply(col_formatting, 
        is, class2 = "fmt_config")))) {
        stop("All format configurations supplied in `col_formatting`", 
            " must be of type `fmt_config`.")
    }
    df &lt;- as_tibble(df)
    varlabs &lt;- var_labels(df, fill = TRUE)
    o &lt;- do.call(order, df[key_cols])
    if (is.unsorted(o)) {
        message("sorting incoming data by key columns")
        df &lt;- df[o, ]
    }
    ordercols &lt;- c(key_cols, setdiff(names(df), key_cols))
    df &lt;- df[, ordercols]
    var_labels(df) &lt;- varlabs[ordercols]
    for (cnm in key_cols) {
        df[[cnm]] &lt;- as_keycol(df[[cnm]])
    }
    cols &lt;- c(key_cols, setdiff(cols, key_cols))
    df[cols] &lt;- lapply(cols, function(col) {
        col_class &lt;- tail(class(df[[col]]), 1)
        col_fmt_class &lt;- if (!col_class %in% names(default_formatting) &amp;&amp; 
            is.numeric(df[[col]])) 
            "numeric"
        else col_class
        col_fmt &lt;- if (col %in% names(col_formatting)) {
            col_formatting[[col]]
        }
        else if (col_fmt_class %in% names(default_formatting)) {
            default_formatting[[col_fmt_class]]
        }
        else {
            if (!"all" %in% names(default_formatting)) {
                stop("Format configurations must be supplied for all listing columns. ", 
                  "To cover all remaining columns please add an 'all' configuration", 
                  " to `default_formatting`.")
            }
            default_formatting[["all"]]
        }
        obj_format(df[[col]]) &lt;- obj_format(col_fmt)
        obj_na_str(df[[col]]) &lt;- if (is.null(obj_na_str(col_fmt))) 
            "NA"
        else obj_na_str(col_fmt)
        obj_align(df[[col]]) &lt;- if (is.null(obj_align(col_fmt))) 
            "left"
        else obj_align(col_fmt)
        df[[col]]
    })
    if (unique_rows) 
        df &lt;- df[!duplicated(df[, cols]), ]
    class(df) &lt;- c("listing_df", class(df))
    main_title(df) &lt;- main_title
    main_footer(df) &lt;- main_footer
    subtitles(df) &lt;- subtitles
    prov_footer(df) &lt;- prov_footer
    listing_dispcols(df) &lt;- cols
    df
})(disp_cols = disp_cols, default_formatting = default_formatting, 
    unique_rows = unique_rows)`: argument "df" is missing, with no default
Backtrace:
     x
  1. +-testthat::expect_message(res &lt;- run(dml01, syn_data)) at test-dml01.R:4:2
  2. | \-testthat:::expect_condition_matching(...)
  3. |   \-testthat:::quasi_capture(...)
  4. |     +-testthat (local) .capture(...)
  5. |     | \-base::withCallingHandlers(...)
  6. |     \-rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  7. +-chevron::run(dml01, syn_data)
  8. +-chevron::run(dml01, syn_data)
  9. | \-chevron:::do_call(object@main, c(proc_data, user_args))
 10. |   \-base::do.call(what, new_args, envir = args_env)
 11. +-chevron (local) `&lt;fn&gt;`(adam_db = adam_db)
 12. | \-chevron:::execute_with_args(...)
 13. |   \-chevron:::do_call(fun, args[intersect(names(args), formalArgs(fun))])
 14. |     \-base::do.call(what, new_args, envir = args_env)
 15. \-rlistings (local) `&lt;fn&gt;`(...)
 16.   \-tibble::as_tibble(df)</error>
    </testcase>
    <testcase time="0.041000000000011" classname="dml01" name="dml01_functions_work_as_expected">
      <error type="error" message="Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL,  ('test-dml01.R:11:3')">Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL, 
    unique_rows = FALSE, default_formatting = list(all = fmt_config()), 
    col_formatting = NULL, main_title = NULL, subtitles = NULL, 
    main_footer = NULL, prov_footer = NULL) 
{
    if (length(non_disp_cols) &gt; 0 &amp;&amp; length(intersect(key_cols, 
        non_disp_cols)) &gt; 0) {
        stop("Key column also listed in non_disp_cols. All key columns are by", 
            " definition display columns.")
    }
    if (!is.null(disp_cols) &amp;&amp; !is.null(non_disp_cols)) {
        stop("Got non-null values for both disp_cols and non_disp_cols. This is not supported.")
    }
    else if (is.null(disp_cols)) {
        cols &lt;- setdiff(names(df), c(key_cols, non_disp_cols))
    }
    else {
        cols &lt;- disp_cols
    }
    if (!all(sapply(default_formatting, is, class2 = "fmt_config"))) {
        stop("All format configurations supplied in `default_formatting`", 
            " must be of type `fmt_config`.")
    }
    if (!(is.null(col_formatting) || all(sapply(col_formatting, 
        is, class2 = "fmt_config")))) {
        stop("All format configurations supplied in `col_formatting`", 
            " must be of type `fmt_config`.")
    }
    df &lt;- as_tibble(df)
    varlabs &lt;- var_labels(df, fill = TRUE)
    o &lt;- do.call(order, df[key_cols])
    if (is.unsorted(o)) {
        message("sorting incoming data by key columns")
        df &lt;- df[o, ]
    }
    ordercols &lt;- c(key_cols, setdiff(names(df), key_cols))
    df &lt;- df[, ordercols]
    var_labels(df) &lt;- varlabs[ordercols]
    for (cnm in key_cols) {
        df[[cnm]] &lt;- as_keycol(df[[cnm]])
    }
    cols &lt;- c(key_cols, setdiff(cols, key_cols))
    df[cols] &lt;- lapply(cols, function(col) {
        col_class &lt;- tail(class(df[[col]]), 1)
        col_fmt_class &lt;- if (!col_class %in% names(default_formatting) &amp;&amp; 
            is.numeric(df[[col]])) 
            "numeric"
        else col_class
        col_fmt &lt;- if (col %in% names(col_formatting)) {
            col_formatting[[col]]
        }
        else if (col_fmt_class %in% names(default_formatting)) {
            default_formatting[[col_fmt_class]]
        }
        else {
            if (!"all" %in% names(default_formatting)) {
                stop("Format configurations must be supplied for all listing columns. ", 
                  "To cover all remaining columns please add an 'all' configuration", 
                  " to `default_formatting`.")
            }
            default_formatting[["all"]]
        }
        obj_format(df[[col]]) &lt;- obj_format(col_fmt)
        obj_na_str(df[[col]]) &lt;- if (is.null(obj_na_str(col_fmt))) 
            "NA"
        else obj_na_str(col_fmt)
        obj_align(df[[col]]) &lt;- if (is.null(obj_align(col_fmt))) 
            "left"
        else obj_align(col_fmt)
        df[[col]]
    })
    if (unique_rows) 
        df &lt;- df[!duplicated(df[, cols]), ]
    class(df) &lt;- c("listing_df", class(df))
    main_title(df) &lt;- main_title
    main_footer(df) &lt;- main_footer
    subtitles(df) &lt;- subtitles
    prov_footer(df) &lt;- prov_footer
    listing_dispcols(df) &lt;- cols
    df
})(disp_cols = disp_cols, default_formatting = default_formatting, 
    unique_rows = unique_rows)`: argument "df" is missing, with no default
Backtrace:
     x
  1. +-testthat::expect_message(res &lt;- dml01_pre(syn_data) %&gt;% dml01_main()) at test-dml01.R:11:2
  2. | \-testthat:::expect_condition_matching(...)
  3. |   \-testthat:::quasi_capture(...)
  4. |     +-testthat (local) .capture(...)
  5. |     | \-base::withCallingHandlers(...)
  6. |     \-rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  7. +-dml01_pre(syn_data) %&gt;% dml01_main()
  8. +-chevron::dml01_main(.)
  9. | \-chevron:::execute_with_args(...)
 10. |   \-chevron:::do_call(fun, args[intersect(names(args), formalArgs(fun))])
 11. |     \-base::do.call(what, new_args, envir = args_env)
 12. \-rlistings (local) `&lt;fn&gt;`(...)
 13.   \-tibble::as_tibble(df)</error>
    </testcase>
  </testsuite>
  <testsuite name="dml02" timestamp="2023-09-20T17:16:42Z" hostname="4f35574870e0" tests="2" skipped="0" failures="0" errors="2" time="0.102">
    <testcase time="0.0589999999999975" classname="dml02" name="dml02_works_with_adsl_dataset">
      <error type="error" message="Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL,  ('test-dml02.R:4:3')">Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL, 
    unique_rows = FALSE, default_formatting = list(all = fmt_config()), 
    col_formatting = NULL, main_title = NULL, subtitles = NULL, 
    main_footer = NULL, prov_footer = NULL) 
{
    if (length(non_disp_cols) &gt; 0 &amp;&amp; length(intersect(key_cols, 
        non_disp_cols)) &gt; 0) {
        stop("Key column also listed in non_disp_cols. All key columns are by", 
            " definition display columns.")
    }
    if (!is.null(disp_cols) &amp;&amp; !is.null(non_disp_cols)) {
        stop("Got non-null values for both disp_cols and non_disp_cols. This is not supported.")
    }
    else if (is.null(disp_cols)) {
        cols &lt;- setdiff(names(df), c(key_cols, non_disp_cols))
    }
    else {
        cols &lt;- disp_cols
    }
    if (!all(sapply(default_formatting, is, class2 = "fmt_config"))) {
        stop("All format configurations supplied in `default_formatting`", 
            " must be of type `fmt_config`.")
    }
    if (!(is.null(col_formatting) || all(sapply(col_formatting, 
        is, class2 = "fmt_config")))) {
        stop("All format configurations supplied in `col_formatting`", 
            " must be of type `fmt_config`.")
    }
    df &lt;- as_tibble(df)
    varlabs &lt;- var_labels(df, fill = TRUE)
    o &lt;- do.call(order, df[key_cols])
    if (is.unsorted(o)) {
        message("sorting incoming data by key columns")
        df &lt;- df[o, ]
    }
    ordercols &lt;- c(key_cols, setdiff(names(df), key_cols))
    df &lt;- df[, ordercols]
    var_labels(df) &lt;- varlabs[ordercols]
    for (cnm in key_cols) {
        df[[cnm]] &lt;- as_keycol(df[[cnm]])
    }
    cols &lt;- c(key_cols, setdiff(cols, key_cols))
    df[cols] &lt;- lapply(cols, function(col) {
        col_class &lt;- tail(class(df[[col]]), 1)
        col_fmt_class &lt;- if (!col_class %in% names(default_formatting) &amp;&amp; 
            is.numeric(df[[col]])) 
            "numeric"
        else col_class
        col_fmt &lt;- if (col %in% names(col_formatting)) {
            col_formatting[[col]]
        }
        else if (col_fmt_class %in% names(default_formatting)) {
            default_formatting[[col_fmt_class]]
        }
        else {
            if (!"all" %in% names(default_formatting)) {
                stop("Format configurations must be supplied for all listing columns. ", 
                  "To cover all remaining columns please add an 'all' configuration", 
                  " to `default_formatting`.")
            }
            default_formatting[["all"]]
        }
        obj_format(df[[col]]) &lt;- obj_format(col_fmt)
        obj_na_str(df[[col]]) &lt;- if (is.null(obj_na_str(col_fmt))) 
            "NA"
        else obj_na_str(col_fmt)
        obj_align(df[[col]]) &lt;- if (is.null(obj_align(col_fmt))) 
            "left"
        else obj_align(col_fmt)
        df[[col]]
    })
    if (unique_rows) 
        df &lt;- df[!duplicated(df[, cols]), ]
    class(df) &lt;- c("listing_df", class(df))
    main_title(df) &lt;- main_title
    main_footer(df) &lt;- main_footer
    subtitles(df) &lt;- subtitles
    prov_footer(df) &lt;- prov_footer
    listing_dispcols(df) &lt;- cols
    df
})(key_cols = key_cols, disp_cols = disp_cols, default_formatting = default_formatting, 
    unique_rows = unique_rows)`: argument "df" is missing, with no default
Backtrace:
     x
  1. +-testthat::expect_message(res &lt;- run(dml02, syn_data)) at test-dml02.R:4:2
  2. | \-testthat:::expect_condition_matching(...)
  3. |   \-testthat:::quasi_capture(...)
  4. |     +-testthat (local) .capture(...)
  5. |     | \-base::withCallingHandlers(...)
  6. |     \-rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  7. +-chevron::run(dml02, syn_data)
  8. +-chevron::run(dml02, syn_data)
  9. | \-chevron:::do_call(object@main, c(proc_data, user_args))
 10. |   \-base::do.call(what, new_args, envir = args_env)
 11. +-chevron (local) `&lt;fn&gt;`(adam_db = adam_db)
 12. | \-chevron:::execute_with_args(...)
 13. |   \-chevron:::do_call(fun, args[intersect(names(args), formalArgs(fun))])
 14. |     \-base::do.call(what, new_args, envir = args_env)
 15. \-rlistings (local) `&lt;fn&gt;`(...)
 16.   \-tibble::as_tibble(df)</error>
    </testcase>
    <testcase time="0.0429999999999922" classname="dml02" name="dml02_functions_work_as_expected">
      <error type="error" message="Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL,  ('test-dml02.R:11:3')">Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL, 
    unique_rows = FALSE, default_formatting = list(all = fmt_config()), 
    col_formatting = NULL, main_title = NULL, subtitles = NULL, 
    main_footer = NULL, prov_footer = NULL) 
{
    if (length(non_disp_cols) &gt; 0 &amp;&amp; length(intersect(key_cols, 
        non_disp_cols)) &gt; 0) {
        stop("Key column also listed in non_disp_cols. All key columns are by", 
            " definition display columns.")
    }
    if (!is.null(disp_cols) &amp;&amp; !is.null(non_disp_cols)) {
        stop("Got non-null values for both disp_cols and non_disp_cols. This is not supported.")
    }
    else if (is.null(disp_cols)) {
        cols &lt;- setdiff(names(df), c(key_cols, non_disp_cols))
    }
    else {
        cols &lt;- disp_cols
    }
    if (!all(sapply(default_formatting, is, class2 = "fmt_config"))) {
        stop("All format configurations supplied in `default_formatting`", 
            " must be of type `fmt_config`.")
    }
    if (!(is.null(col_formatting) || all(sapply(col_formatting, 
        is, class2 = "fmt_config")))) {
        stop("All format configurations supplied in `col_formatting`", 
            " must be of type `fmt_config`.")
    }
    df &lt;- as_tibble(df)
    varlabs &lt;- var_labels(df, fill = TRUE)
    o &lt;- do.call(order, df[key_cols])
    if (is.unsorted(o)) {
        message("sorting incoming data by key columns")
        df &lt;- df[o, ]
    }
    ordercols &lt;- c(key_cols, setdiff(names(df), key_cols))
    df &lt;- df[, ordercols]
    var_labels(df) &lt;- varlabs[ordercols]
    for (cnm in key_cols) {
        df[[cnm]] &lt;- as_keycol(df[[cnm]])
    }
    cols &lt;- c(key_cols, setdiff(cols, key_cols))
    df[cols] &lt;- lapply(cols, function(col) {
        col_class &lt;- tail(class(df[[col]]), 1)
        col_fmt_class &lt;- if (!col_class %in% names(default_formatting) &amp;&amp; 
            is.numeric(df[[col]])) 
            "numeric"
        else col_class
        col_fmt &lt;- if (col %in% names(col_formatting)) {
            col_formatting[[col]]
        }
        else if (col_fmt_class %in% names(default_formatting)) {
            default_formatting[[col_fmt_class]]
        }
        else {
            if (!"all" %in% names(default_formatting)) {
                stop("Format configurations must be supplied for all listing columns. ", 
                  "To cover all remaining columns please add an 'all' configuration", 
                  " to `default_formatting`.")
            }
            default_formatting[["all"]]
        }
        obj_format(df[[col]]) &lt;- obj_format(col_fmt)
        obj_na_str(df[[col]]) &lt;- if (is.null(obj_na_str(col_fmt))) 
            "NA"
        else obj_na_str(col_fmt)
        obj_align(df[[col]]) &lt;- if (is.null(obj_align(col_fmt))) 
            "left"
        else obj_align(col_fmt)
        df[[col]]
    })
    if (unique_rows) 
        df &lt;- df[!duplicated(df[, cols]), ]
    class(df) &lt;- c("listing_df", class(df))
    main_title(df) &lt;- main_title
    main_footer(df) &lt;- main_footer
    subtitles(df) &lt;- subtitles
    prov_footer(df) &lt;- prov_footer
    listing_dispcols(df) &lt;- cols
    df
})(key_cols = key_cols, disp_cols = disp_cols, default_formatting = default_formatting, 
    unique_rows = unique_rows)`: argument "df" is missing, with no default
Backtrace:
     x
  1. +-testthat::expect_message(res &lt;- dml02_pre(syn_data) %&gt;% dml02_main()) at test-dml02.R:11:2
  2. | \-testthat:::expect_condition_matching(...)
  3. |   \-testthat:::quasi_capture(...)
  4. |     +-testthat (local) .capture(...)
  5. |     | \-base::withCallingHandlers(...)
  6. |     \-rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  7. +-dml02_pre(syn_data) %&gt;% dml02_main()
  8. +-chevron::dml02_main(.)
  9. | \-chevron:::execute_with_args(...)
 10. |   \-chevron:::do_call(fun, args[intersect(names(args), formalArgs(fun))])
 11. |     \-base::do.call(what, new_args, envir = args_env)
 12. \-rlistings (local) `&lt;fn&gt;`(...)
 13.   \-tibble::as_tibble(df)</error>
    </testcase>
  </testsuite>
  <testsuite name="dmt01" timestamp="2023-09-20T17:16:42Z" hostname="4f35574870e0" tests="16" skipped="8" failures="0" errors="0" time="5.662">
    <testcase time="0.297000000000011" classname="dmt01" name="dmt01_can_handle_NA_values"/>
    <testcase time="0.349999999999994" classname="dmt01" name="dmt01_can_handle_NA_values">
      <skipped message="Reason: On CRAN ('test-dmt01.R:8:3')"/>
    </testcase>
    <testcase time="0.284000000000006" classname="dmt01" name="dmt01_can_handle_numeric_NA_values"/>
    <testcase time="0.461999999999989" classname="dmt01" name="dmt01_can_handle_numeric_NA_values">
      <skipped message="Reason: On CRAN ('test-dmt01.R:15:3')"/>
    </testcase>
    <testcase time="0.209000000000003" classname="dmt01" name="dmt01_works_as_expected_with_setting_default_precision"/>
    <testcase time="0.320999999999998" classname="dmt01" name="dmt01_works_as_expected_with_setting_default_precision">
      <skipped message="Reason: On CRAN ('test-dmt01.R:20:3')"/>
    </testcase>
    <testcase time="0.295000000000002" classname="dmt01" name="dmt01_works_as_expected_with_auto_precision_settings"/>
    <testcase time="0.796999999999997" classname="dmt01" name="dmt01_works_as_expected_with_auto_precision_settings">
      <skipped message="Reason: On CRAN ('test-dmt01.R:25:3')"/>
    </testcase>
    <testcase time="0.280000000000001" classname="dmt01" name="dmt01_works_as_expected_with_auto_precision_settings_and_defined_precision"/>
    <testcase time="0.945000000000007" classname="dmt01" name="dmt01_works_as_expected_with_auto_precision_settings_and_defined_precision">
      <skipped message="Reason: On CRAN ('test-dmt01.R:30:3')"/>
    </testcase>
    <testcase time="0.185999999999993" classname="dmt01" name="dmt01_works_as_expected_with_auto_precision_settings_and_defined_precision_and_default"/>
    <testcase time="0.307000000000002" classname="dmt01" name="dmt01_works_as_expected_with_auto_precision_settings_and_defined_precision_and_default">
      <skipped message="Reason: On CRAN ('test-dmt01.R:37:3')"/>
    </testcase>
    <testcase time="0.174000000000007" classname="dmt01" name="dmt01_works_as_expected_with_cutomized_stats_value"/>
    <testcase time="0.262999999999991" classname="dmt01" name="dmt01_works_as_expected_with_cutomized_stats_value">
      <skipped message="Reason: On CRAN ('test-dmt01.R:50:3')"/>
    </testcase>
    <testcase time="0.189000000000007" classname="dmt01" name="dmt01_works_as_expected_with_empty_list_as_stats_value"/>
    <testcase time="0.302999999999997" classname="dmt01" name="dmt01_works_as_expected_with_empty_list_as_stats_value">
      <skipped message="Reason: On CRAN ('test-dmt01.R:63:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="dsl01" timestamp="2023-09-20T17:16:48Z" hostname="4f35574870e0" tests="2" skipped="0" failures="0" errors="2" time="0.087">
    <testcase time="0.0420000000000016" classname="dsl01" name="dsl01_works_with_adsl_dataset">
      <error type="error" message="Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL,  ('test-dsl01.R:4:3')">Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL, 
    unique_rows = FALSE, default_formatting = list(all = fmt_config()), 
    col_formatting = NULL, main_title = NULL, subtitles = NULL, 
    main_footer = NULL, prov_footer = NULL) 
{
    if (length(non_disp_cols) &gt; 0 &amp;&amp; length(intersect(key_cols, 
        non_disp_cols)) &gt; 0) {
        stop("Key column also listed in non_disp_cols. All key columns are by", 
            " definition display columns.")
    }
    if (!is.null(disp_cols) &amp;&amp; !is.null(non_disp_cols)) {
        stop("Got non-null values for both disp_cols and non_disp_cols. This is not supported.")
    }
    else if (is.null(disp_cols)) {
        cols &lt;- setdiff(names(df), c(key_cols, non_disp_cols))
    }
    else {
        cols &lt;- disp_cols
    }
    if (!all(sapply(default_formatting, is, class2 = "fmt_config"))) {
        stop("All format configurations supplied in `default_formatting`", 
            " must be of type `fmt_config`.")
    }
    if (!(is.null(col_formatting) || all(sapply(col_formatting, 
        is, class2 = "fmt_config")))) {
        stop("All format configurations supplied in `col_formatting`", 
            " must be of type `fmt_config`.")
    }
    df &lt;- as_tibble(df)
    varlabs &lt;- var_labels(df, fill = TRUE)
    o &lt;- do.call(order, df[key_cols])
    if (is.unsorted(o)) {
        message("sorting incoming data by key columns")
        df &lt;- df[o, ]
    }
    ordercols &lt;- c(key_cols, setdiff(names(df), key_cols))
    df &lt;- df[, ordercols]
    var_labels(df) &lt;- varlabs[ordercols]
    for (cnm in key_cols) {
        df[[cnm]] &lt;- as_keycol(df[[cnm]])
    }
    cols &lt;- c(key_cols, setdiff(cols, key_cols))
    df[cols] &lt;- lapply(cols, function(col) {
        col_class &lt;- tail(class(df[[col]]), 1)
        col_fmt_class &lt;- if (!col_class %in% names(default_formatting) &amp;&amp; 
            is.numeric(df[[col]])) 
            "numeric"
        else col_class
        col_fmt &lt;- if (col %in% names(col_formatting)) {
            col_formatting[[col]]
        }
        else if (col_fmt_class %in% names(default_formatting)) {
            default_formatting[[col_fmt_class]]
        }
        else {
            if (!"all" %in% names(default_formatting)) {
                stop("Format configurations must be supplied for all listing columns. ", 
                  "To cover all remaining columns please add an 'all' configuration", 
                  " to `default_formatting`.")
            }
            default_formatting[["all"]]
        }
        obj_format(df[[col]]) &lt;- obj_format(col_fmt)
        obj_na_str(df[[col]]) &lt;- if (is.null(obj_na_str(col_fmt))) 
            "NA"
        else obj_na_str(col_fmt)
        obj_align(df[[col]]) &lt;- if (is.null(obj_align(col_fmt))) 
            "left"
        else obj_align(col_fmt)
        df[[col]]
    })
    if (unique_rows) 
        df &lt;- df[!duplicated(df[, cols]), ]
    class(df) &lt;- c("listing_df", class(df))
    main_title(df) &lt;- main_title
    main_footer(df) &lt;- main_footer
    subtitles(df) &lt;- subtitles
    prov_footer(df) &lt;- prov_footer
    listing_dispcols(df) &lt;- cols
    df
})(key_cols = key_cols, disp_cols = disp_cols, default_formatting = default_formatting, 
    unique_rows = unique_rows)`: argument "df" is missing, with no default
Backtrace:
     x
  1. +-testthat::expect_message(res &lt;- run(dsl01, syn_data)) at test-dsl01.R:4:2
  2. | \-testthat:::expect_condition_matching(...)
  3. |   \-testthat:::quasi_capture(...)
  4. |     +-testthat (local) .capture(...)
  5. |     | \-base::withCallingHandlers(...)
  6. |     \-rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  7. +-chevron::run(dsl01, syn_data)
  8. +-chevron::run(dsl01, syn_data)
  9. | \-chevron:::do_call(object@main, c(proc_data, user_args))
 10. |   \-base::do.call(what, new_args, envir = args_env)
 11. +-chevron (local) `&lt;fn&gt;`(adam_db = adam_db)
 12. | \-chevron:::execute_with_args(...)
 13. |   \-chevron:::do_call(fun, args[intersect(names(args), formalArgs(fun))])
 14. |     \-base::do.call(what, new_args, envir = args_env)
 15. \-rlistings (local) `&lt;fn&gt;`(...)
 16.   \-tibble::as_tibble(df)</error>
    </testcase>
    <testcase time="0.0450000000000017" classname="dsl01" name="dsl01_functions_work_as_expected">
      <error type="error" message="Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL,  ('test-dsl01.R:11:3')">Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL, 
    unique_rows = FALSE, default_formatting = list(all = fmt_config()), 
    col_formatting = NULL, main_title = NULL, subtitles = NULL, 
    main_footer = NULL, prov_footer = NULL) 
{
    if (length(non_disp_cols) &gt; 0 &amp;&amp; length(intersect(key_cols, 
        non_disp_cols)) &gt; 0) {
        stop("Key column also listed in non_disp_cols. All key columns are by", 
            " definition display columns.")
    }
    if (!is.null(disp_cols) &amp;&amp; !is.null(non_disp_cols)) {
        stop("Got non-null values for both disp_cols and non_disp_cols. This is not supported.")
    }
    else if (is.null(disp_cols)) {
        cols &lt;- setdiff(names(df), c(key_cols, non_disp_cols))
    }
    else {
        cols &lt;- disp_cols
    }
    if (!all(sapply(default_formatting, is, class2 = "fmt_config"))) {
        stop("All format configurations supplied in `default_formatting`", 
            " must be of type `fmt_config`.")
    }
    if (!(is.null(col_formatting) || all(sapply(col_formatting, 
        is, class2 = "fmt_config")))) {
        stop("All format configurations supplied in `col_formatting`", 
            " must be of type `fmt_config`.")
    }
    df &lt;- as_tibble(df)
    varlabs &lt;- var_labels(df, fill = TRUE)
    o &lt;- do.call(order, df[key_cols])
    if (is.unsorted(o)) {
        message("sorting incoming data by key columns")
        df &lt;- df[o, ]
    }
    ordercols &lt;- c(key_cols, setdiff(names(df), key_cols))
    df &lt;- df[, ordercols]
    var_labels(df) &lt;- varlabs[ordercols]
    for (cnm in key_cols) {
        df[[cnm]] &lt;- as_keycol(df[[cnm]])
    }
    cols &lt;- c(key_cols, setdiff(cols, key_cols))
    df[cols] &lt;- lapply(cols, function(col) {
        col_class &lt;- tail(class(df[[col]]), 1)
        col_fmt_class &lt;- if (!col_class %in% names(default_formatting) &amp;&amp; 
            is.numeric(df[[col]])) 
            "numeric"
        else col_class
        col_fmt &lt;- if (col %in% names(col_formatting)) {
            col_formatting[[col]]
        }
        else if (col_fmt_class %in% names(default_formatting)) {
            default_formatting[[col_fmt_class]]
        }
        else {
            if (!"all" %in% names(default_formatting)) {
                stop("Format configurations must be supplied for all listing columns. ", 
                  "To cover all remaining columns please add an 'all' configuration", 
                  " to `default_formatting`.")
            }
            default_formatting[["all"]]
        }
        obj_format(df[[col]]) &lt;- obj_format(col_fmt)
        obj_na_str(df[[col]]) &lt;- if (is.null(obj_na_str(col_fmt))) 
            "NA"
        else obj_na_str(col_fmt)
        obj_align(df[[col]]) &lt;- if (is.null(obj_align(col_fmt))) 
            "left"
        else obj_align(col_fmt)
        df[[col]]
    })
    if (unique_rows) 
        df &lt;- df[!duplicated(df[, cols]), ]
    class(df) &lt;- c("listing_df", class(df))
    main_title(df) &lt;- main_title
    main_footer(df) &lt;- main_footer
    subtitles(df) &lt;- subtitles
    prov_footer(df) &lt;- prov_footer
    listing_dispcols(df) &lt;- cols
    df
})(key_cols = key_cols, disp_cols = disp_cols, default_formatting = default_formatting, 
    unique_rows = unique_rows)`: argument "df" is missing, with no default
Backtrace:
     x
  1. +-testthat::expect_message(res &lt;- dsl01_pre(syn_data) %&gt;% dsl01_main()) at test-dsl01.R:11:2
  2. | \-testthat:::expect_condition_matching(...)
  3. |   \-testthat:::quasi_capture(...)
  4. |     +-testthat (local) .capture(...)
  5. |     | \-base::withCallingHandlers(...)
  6. |     \-rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  7. +-dsl01_pre(syn_data) %&gt;% dsl01_main()
  8. +-chevron::dsl01_main(.)
  9. | \-chevron:::execute_with_args(...)
 10. |   \-chevron:::do_call(fun, args[intersect(names(args), formalArgs(fun))])
 11. |     \-base::do.call(what, new_args, envir = args_env)
 12. \-rlistings (local) `&lt;fn&gt;`(...)
 13.   \-tibble::as_tibble(df)</error>
    </testcase>
  </testsuite>
  <testsuite name="dsl02" timestamp="2023-09-20T17:16:48Z" hostname="4f35574870e0" tests="2" skipped="0" failures="0" errors="2" time="0.105">
    <testcase time="0.0579999999999927" classname="dsl02" name="dsl02_works_with_adsl_dataset">
      <error type="error" message="Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL,  ('test-dsl02.R:4:3')">Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL, 
    unique_rows = FALSE, default_formatting = list(all = fmt_config()), 
    col_formatting = NULL, main_title = NULL, subtitles = NULL, 
    main_footer = NULL, prov_footer = NULL) 
{
    if (length(non_disp_cols) &gt; 0 &amp;&amp; length(intersect(key_cols, 
        non_disp_cols)) &gt; 0) {
        stop("Key column also listed in non_disp_cols. All key columns are by", 
            " definition display columns.")
    }
    if (!is.null(disp_cols) &amp;&amp; !is.null(non_disp_cols)) {
        stop("Got non-null values for both disp_cols and non_disp_cols. This is not supported.")
    }
    else if (is.null(disp_cols)) {
        cols &lt;- setdiff(names(df), c(key_cols, non_disp_cols))
    }
    else {
        cols &lt;- disp_cols
    }
    if (!all(sapply(default_formatting, is, class2 = "fmt_config"))) {
        stop("All format configurations supplied in `default_formatting`", 
            " must be of type `fmt_config`.")
    }
    if (!(is.null(col_formatting) || all(sapply(col_formatting, 
        is, class2 = "fmt_config")))) {
        stop("All format configurations supplied in `col_formatting`", 
            " must be of type `fmt_config`.")
    }
    df &lt;- as_tibble(df)
    varlabs &lt;- var_labels(df, fill = TRUE)
    o &lt;- do.call(order, df[key_cols])
    if (is.unsorted(o)) {
        message("sorting incoming data by key columns")
        df &lt;- df[o, ]
    }
    ordercols &lt;- c(key_cols, setdiff(names(df), key_cols))
    df &lt;- df[, ordercols]
    var_labels(df) &lt;- varlabs[ordercols]
    for (cnm in key_cols) {
        df[[cnm]] &lt;- as_keycol(df[[cnm]])
    }
    cols &lt;- c(key_cols, setdiff(cols, key_cols))
    df[cols] &lt;- lapply(cols, function(col) {
        col_class &lt;- tail(class(df[[col]]), 1)
        col_fmt_class &lt;- if (!col_class %in% names(default_formatting) &amp;&amp; 
            is.numeric(df[[col]])) 
            "numeric"
        else col_class
        col_fmt &lt;- if (col %in% names(col_formatting)) {
            col_formatting[[col]]
        }
        else if (col_fmt_class %in% names(default_formatting)) {
            default_formatting[[col_fmt_class]]
        }
        else {
            if (!"all" %in% names(default_formatting)) {
                stop("Format configurations must be supplied for all listing columns. ", 
                  "To cover all remaining columns please add an 'all' configuration", 
                  " to `default_formatting`.")
            }
            default_formatting[["all"]]
        }
        obj_format(df[[col]]) &lt;- obj_format(col_fmt)
        obj_na_str(df[[col]]) &lt;- if (is.null(obj_na_str(col_fmt))) 
            "NA"
        else obj_na_str(col_fmt)
        obj_align(df[[col]]) &lt;- if (is.null(obj_align(col_fmt))) 
            "left"
        else obj_align(col_fmt)
        df[[col]]
    })
    if (unique_rows) 
        df &lt;- df[!duplicated(df[, cols]), ]
    class(df) &lt;- c("listing_df", class(df))
    main_title(df) &lt;- main_title
    main_footer(df) &lt;- main_footer
    subtitles(df) &lt;- subtitles
    prov_footer(df) &lt;- prov_footer
    listing_dispcols(df) &lt;- cols
    df
})(key_cols = key_cols, disp_cols = disp_cols, default_formatting = default_formatting, 
    unique_rows = unique_rows)`: argument "df" is missing, with no default
Backtrace:
     x
  1. +-testthat::expect_message(res &lt;- run(dsl02, syn_data)) at test-dsl02.R:4:2
  2. | \-testthat:::expect_condition_matching(...)
  3. |   \-testthat:::quasi_capture(...)
  4. |     +-testthat (local) .capture(...)
  5. |     | \-base::withCallingHandlers(...)
  6. |     \-rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  7. +-chevron::run(dsl02, syn_data)
  8. +-chevron::run(dsl02, syn_data)
  9. | \-chevron:::do_call(object@main, c(proc_data, user_args))
 10. |   \-base::do.call(what, new_args, envir = args_env)
 11. +-chevron (local) `&lt;fn&gt;`(adam_db = adam_db)
 12. | \-chevron:::execute_with_args(...)
 13. |   \-chevron:::do_call(fun, args[intersect(names(args), formalArgs(fun))])
 14. |     \-base::do.call(what, new_args, envir = args_env)
 15. \-rlistings (local) `&lt;fn&gt;`(...)
 16.   \-tibble::as_tibble(df)</error>
    </testcase>
    <testcase time="0.0470000000000113" classname="dsl02" name="dsl02_functions_work_as_expected">
      <error type="error" message="Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL,  ('test-dsl02.R:11:3')">Error in `(function (df, key_cols = names(df)[1], disp_cols = NULL, non_disp_cols = NULL, 
    unique_rows = FALSE, default_formatting = list(all = fmt_config()), 
    col_formatting = NULL, main_title = NULL, subtitles = NULL, 
    main_footer = NULL, prov_footer = NULL) 
{
    if (length(non_disp_cols) &gt; 0 &amp;&amp; length(intersect(key_cols, 
        non_disp_cols)) &gt; 0) {
        stop("Key column also listed in non_disp_cols. All key columns are by", 
            " definition display columns.")
    }
    if (!is.null(disp_cols) &amp;&amp; !is.null(non_disp_cols)) {
        stop("Got non-null values for both disp_cols and non_disp_cols. This is not supported.")
    }
    else if (is.null(disp_cols)) {
        cols &lt;- setdiff(names(df), c(key_cols, non_disp_cols))
    }
    else {
        cols &lt;- disp_cols
    }
    if (!all(sapply(default_formatting, is, class2 = "fmt_config"))) {
        stop("All format configurations supplied in `default_formatting`", 
            " must be of type `fmt_config`.")
    }
    if (!(is.null(col_formatting) || all(sapply(col_formatting, 
        is, class2 = "fmt_config")))) {
        stop("All format configurations supplied in `col_formatting`", 
            " must be of type `fmt_config`.")
    }
    df &lt;- as_tibble(df)
    varlabs &lt;- var_labels(df, fill = TRUE)
    o &lt;- do.call(order, df[key_cols])
    if (is.unsorted(o)) {
        message("sorting incoming data by key columns")
        df &lt;- df[o, ]
    }
    ordercols &lt;- c(key_cols, setdiff(names(df), key_cols))
    df &lt;- df[, ordercols]
    var_labels(df) &lt;- varlabs[ordercols]
    for (cnm in key_cols) {
        df[[cnm]] &lt;- as_keycol(df[[cnm]])
    }
    cols &lt;- c(key_cols, setdiff(cols, key_cols))
    df[cols] &lt;- lapply(cols, function(col) {
        col_class &lt;- tail(class(df[[col]]), 1)
        col_fmt_class &lt;- if (!col_class %in% names(default_formatting) &amp;&amp; 
            is.numeric(df[[col]])) 
            "numeric"
        else col_class
        col_fmt &lt;- if (col %in% names(col_formatting)) {
            col_formatting[[col]]
        }
        else if (col_fmt_class %in% names(default_formatting)) {
            default_formatting[[col_fmt_class]]
        }
        else {
            if (!"all" %in% names(default_formatting)) {
                stop("Format configurations must be supplied for all listing columns. ", 
                  "To cover all remaining columns please add an 'all' configuration", 
                  " to `default_formatting`.")
            }
            default_formatting[["all"]]
        }
        obj_format(df[[col]]) &lt;- obj_format(col_fmt)
        obj_na_str(df[[col]]) &lt;- if (is.null(obj_na_str(col_fmt))) 
            "NA"
        else obj_na_str(col_fmt)
        obj_align(df[[col]]) &lt;- if (is.null(obj_align(col_fmt))) 
            "left"
        else obj_align(col_fmt)
        df[[col]]
    })
    if (unique_rows) 
        df &lt;- df[!duplicated(df[, cols]), ]
    class(df) &lt;- c("listing_df", class(df))
    main_title(df) &lt;- main_title
    main_footer(df) &lt;- main_footer
    subtitles(df) &lt;- subtitles
    prov_footer(df) &lt;- prov_footer
    listing_dispcols(df) &lt;- cols
    df
})(key_cols = key_cols, disp_cols = disp_cols, default_formatting = default_formatting, 
    unique_rows = unique_rows)`: argument "df" is missing, with no default
Backtrace:
     x
  1. +-testthat::expect_message(res &lt;- dsl02_pre(syn_data) %&gt;% dsl02_main()) at test-dsl02.R:11:2
  2. | \-testthat:::expect_condition_matching(...)
  3. |   \-testthat:::quasi_capture(...)
  4. |     +-testthat (local) .capture(...)
  5. |     | \-base::withCallingHandlers(...)
  6. |     \-rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  7. +-dsl02_pre(syn_data) %&gt;% dsl02_main()
  8. +-chevron::dsl02_main(.)
  9. | \-chevron:::execute_with_args(...)
 10. |   \-chevron:::do_call(fun, args[intersect(names(args), formalArgs(fun))])
 11. |     \-base::do.call(what, new_args, envir = args_env)
 12. \-rlistings (local) `&lt;fn&gt;`(...)
 13.   \-tibble::as_tibble(df)</error>
    </testcase>
  </testsuite>
  <testsuite name="dst01" timestamp="2023-09-20T17:16:48Z" hostname="4f35574870e0" tests="14" skipped="7" failures="0" errors="0" time="2.933">
    <testcase time="0.187999999999988" classname="dst01" name="dst01_works_as_expected_when_all_data_are_NA"/>
    <testcase time="0.0600000000000023" classname="dst01" name="dst01_works_as_expected_when_all_data_are_NA">
      <skipped message="Reason: On CRAN ('test-dst01.R:11:3')"/>
    </testcase>
    <testcase time="0.155000000000001" classname="dst01" name="dst01_can_handle_all_NA_values_in_DCSREAS"/>
    <testcase time="0.138999999999996" classname="dst01" name="dst01_can_handle_all_NA_values_in_DCSREAS">
      <skipped message="Reason: On CRAN ('test-dst01.R:22:3')"/>
    </testcase>
    <testcase time="0.213000000000008" classname="dst01" name="dst01_can_handle_some_NA_values"/>
    <testcase time="0.236000000000004" classname="dst01" name="dst01_can_handle_some_NA_values">
      <skipped message="Reason: On CRAN ('test-dst01.R:29:3')"/>
    </testcase>
    <testcase time="0.153999999999996" classname="dst01" name="dst01_can_handle_missing_levels_in_status_var"/>
    <testcase time="0.111999999999995" classname="dst01" name="dst01_can_handle_missing_levels_in_status_var">
      <skipped message="Reason: On CRAN ('test-dst01.R:39:3')"/>
    </testcase>
    <testcase time="0.248000000000005" classname="dst01" name="dst01_can_create_variants"/>
    <testcase time="0.259999999999991" classname="dst01" name="dst01_can_create_variants">
      <skipped message="Reason: On CRAN ('test-dst01.R:44:3')"/>
    </testcase>
    <testcase time="0.293000000000006" classname="dst01" name="dst01_can_create_variants"/>
    <testcase time="0.257999999999996" classname="dst01" name="dst01_can_create_variants">
      <skipped message="Reason: On CRAN ('test-dst01.R:49:3')"/>
    </testcase>
    <testcase time="0.320999999999998" classname="dst01" name="dst01_can_create_variants"/>
    <testcase time="0.296000000000006" classname="dst01" name="dst01_can_create_variants">
      <skipped message="Reason: On CRAN ('test-dst01.R:56:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="dtht01" timestamp="2023-09-20T17:16:51Z" hostname="4f35574870e0" tests="5" skipped="3" failures="0" errors="0" time="1.697">
    <testcase time="0.150000000000006" classname="dtht01" name="dtht01_can_handle_all_NA_values"/>
    <testcase time="0.155000000000001" classname="dtht01" name="dtht01_can_handle_all_NA_values">
      <skipped message="Reason: On CRAN ('test-dtht01.R:12:3')"/>
    </testcase>
    <testcase time="0.317999999999998" classname="dtht01" name="dtht01_can_handle_some_NA_values"/>
    <testcase time="0.378999999999991" classname="dtht01" name="dtht01_can_handle_some_NA_values">
      <skipped message="Reason: On CRAN ('test-dtht01.R:19:3')"/>
    </testcase>
    <testcase time="0.695000000000007" classname="dtht01" name="dtht01_can_be_parametrize_as_expected">
      <skipped message="Reason: On CRAN ('test-dtht01.R:30:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="egt01" timestamp="2023-09-20T17:16:53Z" hostname="4f35574870e0" tests="3" skipped="2" failures="0" errors="0" time="8.585">
    <testcase time="4.253" classname="egt01" name="egt01_functions_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-egt01.R:7:3')"/>
    </testcase>
    <testcase time="2.056" classname="egt01" name="egt01_can_handle_n_0_and_outputs_NE_instead_of_infs_and_NAs"/>
    <testcase time="2.276" classname="egt01" name="egt01_can_handle_n_0_and_outputs_NE_instead_of_infs_and_NAs">
      <skipped message="Reason: On CRAN ('test-egt01.R:20:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="egt02" timestamp="2023-09-20T17:17:01Z" hostname="4f35574870e0" tests="2" skipped="2" failures="0" errors="0" time="0.838">
    <testcase time="0.430999999999997" classname="egt02" name="egt02_1_functions_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-egt02.R:7:3')"/>
    </testcase>
    <testcase time="0.407000000000011" classname="egt02" name="egt02_2_functions_with_default_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-egt02.R:14:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="egt03" timestamp="2023-09-20T17:17:02Z" hostname="4f35574870e0" tests="5" skipped="2" failures="0" errors="0" time="3.833">
    <testcase time="1.89699999999999" classname="egt03" name="egt03_functions_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-egt03.R:7:3')"/>
    </testcase>
    <testcase time="0.0350000000000108" classname="egt03" name="egt03_errors_on_all_NA_values"/>
    <testcase time="0.781999999999996" classname="egt03" name="egt03_can_handle_some_NA_values"/>
    <testcase time="1.084" classname="egt03" name="egt03_can_handle_some_NA_values">
      <skipped message="Reason: On CRAN ('test-egt03.R:28:3')"/>
    </testcase>
    <testcase time="0.0349999999999966" classname="egt03" name="egt03_fails_on_incomplete_data"/>
  </testsuite>
  <testsuite name="egt05_qtcat" timestamp="2023-09-20T17:17:06Z" hostname="4f35574870e0" tests="4" skipped="2" failures="0" errors="0" time="4.756">
    <testcase time="3.208" classname="egt05_qtcat" name="egt05_qtcat_functions_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-egt05_qtcat.R:7:3')"/>
    </testcase>
    <testcase time="0.0480000000000018" classname="egt05_qtcat" name="egt05_qtcat_erros_on_all_NA_values"/>
    <testcase time="0.617999999999995" classname="egt05_qtcat" name="egt05_qtcat_can_handle_some_NA_values"/>
    <testcase time="0.882000000000005" classname="egt05_qtcat" name="egt05_qtcat_can_handle_some_NA_values">
      <skipped message="Reason: On CRAN ('test-egt05_qtcat.R:28:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="empty_report" timestamp="2023-09-20T17:17:11Z" hostname="4f35574870e0" tests="25" skipped="0" failures="0" errors="0" time="3.15">
    <testcase time="0.179000000000002" classname="empty_report" name="tlg_functions_return_null_reports_when_domain_table_is_empty"/>
    <testcase time="0.353999999999999" classname="empty_report" name="tlg_functions_return_null_reports_when_domain_table_is_empty"/>
    <testcase time="0.24199999999999" classname="empty_report" name="tlg_functions_return_null_reports_when_domain_table_is_empty"/>
    <testcase time="0.117000000000004" classname="empty_report" name="tlg_functions_return_null_reports_when_domain_table_is_empty"/>
    <testcase time="0.117000000000004" classname="empty_report" name="tlg_functions_return_null_reports_when_domain_table_is_empty"/>
    <testcase time="0.0609999999999928" classname="empty_report" name="tlg_functions_return_null_reports_when_domain_table_is_empty"/>
    <testcase time="0.117000000000004" classname="empty_report" name="tlg_functions_return_null_reports_when_domain_table_is_empty"/>
    <testcase time="0.168999999999997" classname="empty_report" name="tlg_functions_return_null_reports_when_domain_table_is_empty"/>
    <testcase time="0.209999999999994" classname="empty_report" name="tlg_functions_return_null_reports_when_domain_table_is_empty"/>
    <testcase time="0.0810000000000031" classname="empty_report" name="tlg_functions_return_null_reports_when_domain_table_is_empty"/>
    <testcase time="0.0970000000000084" classname="empty_report" name="tlg_functions_return_null_reports_when_domain_table_is_empty"/>
    <testcase time="0.0429999999999922" classname="empty_report" name="tlg_functions_return_null_reports_when_domain_table_is_empty"/>
    <testcase time="0.0420000000000016" classname="empty_report" name="tlg_functions_return_null_reports_when_domain_table_is_empty"/>
    <testcase time="0.0630000000000024" classname="empty_report" name="tlg_functions_return_null_reports_when_domain_table_is_empty"/>
    <testcase time="0.0829999999999984" classname="empty_report" name="tlg_functions_return_null_reports_when_domain_table_is_empty"/>
    <testcase time="0.0810000000000031" classname="empty_report" name="tlg_functions_return_null_reports_when_domain_table_is_empty"/>
    <testcase time="0.0799999999999983" classname="empty_report" name="tlg_functions_return_null_reports_when_domain_table_is_empty"/>
    <testcase time="0.0960000000000036" classname="empty_report" name="tlg_functions_return_null_reports_when_domain_table_is_empty"/>
    <testcase time="0.455999999999989" classname="empty_report" name="tlg_functions_return_null_reports_when_domain_table_is_empty"/>
    <testcase time="0.115000000000009" classname="empty_report" name="tlg_functions_return_null_reports_when_domain_table_is_empty"/>
    <testcase time="0.0919999999999987" classname="empty_report" name="tlg_functions_return_null_reports_when_domain_table_is_empty"/>
    <testcase time="0.0680000000000121" classname="empty_report" name="tlg_functions_return_null_reports_when_domain_table_is_empty"/>
    <testcase time="0.097999999999999" classname="empty_report" name="tlg_functions_return_null_reports_when_domain_table_is_empty"/>
    <testcase time="0.0439999999999969" classname="empty_report" name="tlg_functions_return_null_reports_when_domain_table_is_empty"/>
    <testcase time="0.0450000000000017" classname="empty_report" name="tlg_functions_return_null_reports_when_domain_table_is_empty"/>
  </testsuite>
  <testsuite name="ext01" timestamp="2023-09-20T17:17:14Z" hostname="4f35574870e0" tests="8" skipped="7" failures="0" errors="0" time="5.857">
    <testcase time="0.641999999999996" classname="ext01" name="ext01_functions_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-ext01.R:7:3')"/>
    </testcase>
    <testcase time="0.712999999999994" classname="ext01" name="ext01_functions_with_categorical_data_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-ext01.R:15:3')"/>
    </testcase>
    <testcase time="0.278000000000006" classname="ext01" name="ext01_works"/>
    <testcase time="0.352000000000004" classname="ext01" name="ext01_works">
      <skipped message="Reason: On CRAN ('test-ext01.R:23:3')"/>
    </testcase>
    <testcase time="0.926000000000002" classname="ext01" name="ext01_works_for_selected_parameters_and_categorical_variables">
      <skipped message="Reason: On CRAN ('test-ext01.R:36:3')"/>
    </testcase>
    <testcase time="0.984999999999999" classname="ext01" name="ext01_works_with_custom_mapping_order">
      <skipped message="Reason: On CRAN ('test-ext01.R:47:3')"/>
    </testcase>
    <testcase time="0.968999999999994" classname="ext01" name="ext01_works_with_custom_mapping_order_for_a_single_split">
      <skipped message="Reason: On CRAN ('test-ext01.R:57:3')"/>
    </testcase>
    <testcase time="0.992000000000004" classname="ext01" name="ext01_works_with_custom_mapping_fill_in_value">
      <skipped message="Reason: On CRAN ('test-ext01.R:68:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="fstg01" timestamp="2023-09-20T17:17:20Z" hostname="4f35574870e0" tests="13" skipped="0" failures="0" errors="0" time="8.546">
    <testcase time="0.0259999999999962" classname="fstg01" name="fstg01_works_as_expected"/>
    <testcase time="1.895" classname="fstg01" name="fstg01_works_as_expected"/>
    <testcase time="0.00500000000000966" classname="fstg01" name="fstg01_works_as_expected"/>
    <testcase time="1.899" classname="fstg01" name="fstg01_works_as_expected_with_custom_color_set"/>
    <testcase time="0.00499999999999545" classname="fstg01" name="fstg01_works_as_expected_with_custom_color_set"/>
    <testcase time="1.595" classname="fstg01" name="fstg01_works_as_expected_with_custom_color_set"/>
    <testcase time="0.00499999999999545" classname="fstg01" name="fstg01_works_as_expected_with_custom_color_set"/>
    <testcase time="0.343000000000004" classname="fstg01" name="fstg01_works_if_changes_are_in_subgroups_strata_var_conf_level_and_label_all"/>
    <testcase time="0.00499999999999545" classname="fstg01" name="fstg01_works_if_changes_are_in_subgroups_strata_var_conf_level_and_label_all"/>
    <testcase time="0.801000000000002" classname="fstg01" name="fstg01_works_if_changes_are_in_subgroups_strata_var_conf_level_and_label_all"/>
    <testcase time="0.00400000000000489" classname="fstg01" name="fstg01_works_if_changes_are_in_subgroups_strata_var_conf_level_and_label_all"/>
    <testcase time="1.959" classname="fstg01" name="fstg01_can_handle_some_NA_values_in_subgroups"/>
    <testcase time="0.00399999999999068" classname="fstg01" name="fstg01_can_handle_some_NA_values_in_subgroups"/>
  </testsuite>
  <testsuite name="fstg02" timestamp="2023-09-20T17:17:28Z" hostname="4f35574870e0" tests="9" skipped="0" failures="0" errors="0" time="11.13">
    <testcase time="0.0190000000000055" classname="fstg02" name="fstg02_works_as_expected"/>
    <testcase time="1.691" classname="fstg02" name="fstg02_works_as_expected"/>
    <testcase time="1.675" classname="fstg02" name="fstg02_works_as_expected_with_custom_color_set"/>
    <testcase time="1.45399999999999" classname="fstg02" name="fstg02_works_as_expected_with_custom_color_set"/>
    <testcase time="0.319000000000003" classname="fstg02" name="fstg02_works_if_changes_are_in_subgroups_strata_var_conf_level_and_label_all"/>
    <testcase time="0.788000000000011" classname="fstg02" name="fstg02_works_if_changes_are_in_subgroups_strata_var_conf_level_and_label_all"/>
    <testcase time="1.71199999999999" classname="fstg02" name="fstg02_can_handle_some_NA_values_in_subgroups"/>
    <testcase time="1.715" classname="fstg02" name="fstg02_can_handle_customized_time_units"/>
    <testcase time="1.75700000000001" classname="fstg02" name="fstg02_can_handle_customized_time_units"/>
  </testsuite>
  <testsuite name="kmg01" timestamp="2023-09-20T17:17:39Z" hostname="4f35574870e0" tests="13" skipped="0" failures="0" errors="0" time="1.358">
    <testcase time="0.0169999999999959" classname="kmg01" name="kmg01_works_as_expected"/>
    <testcase time="0.275999999999996" classname="kmg01" name="kmg01_works_as_expected"/>
    <testcase time="0.00500000000000966" classname="kmg01" name="kmg01_works_as_expected"/>
    <testcase time="0.268999999999991" classname="kmg01" name="kmg01_works_as_expected_with_custom_color_set"/>
    <testcase time="0.00400000000000489" classname="kmg01" name="kmg01_works_as_expected_with_custom_color_set"/>
    <testcase time="0.209000000000003" classname="kmg01" name="kmg01_works_as_expected_with_custom_color_set"/>
    <testcase time="0.00399999999999068" classname="kmg01" name="kmg01_works_as_expected_with_custom_color_set"/>
    <testcase time="0.207000000000008" classname="kmg01" name="kmg01_works_if_change_pvalue_ties_and_conf_level"/>
    <testcase time="0.00399999999999068" classname="kmg01" name="kmg01_works_if_change_pvalue_ties_and_conf_level"/>
    <testcase time="0.179000000000002" classname="kmg01" name="kmg01_works_if_change_annotation_position"/>
    <testcase time="0.00600000000000023" classname="kmg01" name="kmg01_works_if_change_annotation_position"/>
    <testcase time="0.173000000000002" classname="kmg01" name="kmg01_works_for_stratified_anlaysis"/>
    <testcase time="0.00499999999999545" classname="kmg01" name="kmg01_works_for_stratified_anlaysis"/>
  </testsuite>
  <testsuite name="lbt01" timestamp="2023-09-20T17:17:41Z" hostname="4f35574870e0" tests="4" skipped="3" failures="0" errors="0" time="11.993">
    <testcase time="4.075" classname="lbt01" name="lbt01_functions_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-lbt01.R:7:3')"/>
    </testcase>
    <testcase time="4.20600000000002" classname="lbt01" name="lbt01_functions_with_row_split_var_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-lbt01.R:16:3')"/>
    </testcase>
    <testcase time="1.51999999999998" classname="lbt01" name="lbt01_can_handle_n_0_and_outputs_NE_instead_of_infs_and_NAs"/>
    <testcase time="2.19200000000001" classname="lbt01" name="lbt01_can_handle_n_0_and_outputs_NE_instead_of_infs_and_NAs">
      <skipped message="Reason: On CRAN ('test-lbt01.R:29:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="lbt04" timestamp="2023-09-20T17:17:53Z" hostname="4f35574870e0" tests="8" skipped="4" failures="0" errors="0" time="3.624">
    <testcase time="1.13499999999999" classname="lbt04" name="lbt04_functions_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-lbt04.R:7:3')"/>
    </testcase>
    <testcase time="0.106999999999999" classname="lbt04" name="lbt04_can_handle_all_NA_values"/>
    <testcase time="0.0579999999999927" classname="lbt04" name="lbt04_can_handle_all_NA_values">
      <skipped message="Reason: On CRAN ('test-lbt04.R:20:3')"/>
    </testcase>
    <testcase time="0.469000000000023" classname="lbt04" name="lbt04_can_handle_missing_levels"/>
    <testcase time="0.656999999999982" classname="lbt04" name="lbt04_can_handle_missing_levels">
      <skipped message="Reason: On CRAN ('test-lbt04.R:31:3')"/>
    </testcase>
    <testcase time="0.495000000000005" classname="lbt04" name="lbt04_can_handle_some_NA_values"/>
    <testcase time="0.668000000000006" classname="lbt04" name="lbt04_can_handle_some_NA_values">
      <skipped message="Reason: On CRAN ('test-lbt04.R:39:3')"/>
    </testcase>
    <testcase time="0.0349999999999966" classname="lbt04" name="lbt04_fails_on_incomlete_data"/>
  </testsuite>
  <testsuite name="lbt05" timestamp="2023-09-20T17:17:56Z" hostname="4f35574870e0" tests="5" skipped="2" failures="0" errors="0" time="2.317">
    <testcase time="0.893000000000001" classname="lbt05" name="lbt05_functions_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-lbt05.R:7:3')"/>
    </testcase>
    <testcase time="0.475999999999999" classname="lbt05" name="lbt05_give_all_0_count_if_ANRIND_are_all_missing"/>
    <testcase time="0.478000000000009" classname="lbt05" name="lbt05_can_handle_some_NA_values"/>
    <testcase time="0.412999999999982" classname="lbt05" name="lbt05_can_handle_some_NA_values">
      <skipped message="Reason: On CRAN ('test-lbt05.R:36:3')"/>
    </testcase>
    <testcase time="0.0570000000000164" classname="lbt05" name="lbt05_fails_on_incomlete_data"/>
  </testsuite>
  <testsuite name="lbt06" timestamp="2023-09-20T17:17:59Z" hostname="4f35574870e0" tests="3" skipped="1" failures="0" errors="0" time="5.369">
    <testcase time="1.595" classname="lbt06" name="lbt06_gives_all_0_count_if_ANRIND_and_BNRIND_are_all_missing"/>
    <testcase time="3.721" classname="lbt06" name="lbt06_can_handle_some_NA_values">
      <skipped message="Reason: On CRAN ('test-lbt06.R:20:3')"/>
    </testcase>
    <testcase time="0.0529999999999973" classname="lbt06" name="lbt06_fails_on_incomplete_data"/>
  </testsuite>
  <testsuite name="lbt07" timestamp="2023-09-20T17:18:04Z" hostname="4f35574870e0" tests="4" skipped="2" failures="0" errors="0" time="2.619">
    <testcase time="1.30099999999999" classname="lbt07" name="lbt07_functions_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-lbt07.R:7:3')"/>
    </testcase>
    <testcase time="0.680000000000007" classname="lbt07" name="lbt07_can_handle_some_NA_values"/>
    <testcase time="0.581999999999994" classname="lbt07" name="lbt07_can_handle_some_NA_values">
      <skipped message="Reason: On CRAN ('test-lbt07.R:22:3')"/>
    </testcase>
    <testcase time="0.0560000000000116" classname="lbt07" name="lbt07_fails_on_incomlete_data"/>
  </testsuite>
  <testsuite name="lbt14" timestamp="2023-09-20T17:18:07Z" hostname="4f35574870e0" tests="16" skipped="10" failures="0" errors="0" time="36.954">
    <testcase time="3.35299999999998" classname="lbt14" name="lbt14_functions_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-lbt14.R:7:3')"/>
    </testcase>
    <testcase time="3.631" classname="lbt14" name="lbt14_functions_with_default_argument_value_return_expected_result_with_test_data_when_direction_high">
      <skipped message="Reason: On CRAN ('test-lbt14.R:14:3')"/>
    </testcase>
    <testcase time="2.89600000000002" classname="lbt14" name="lbt14_functions_with_gr_missing_excl_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-lbt14.R:21:3')"/>
    </testcase>
    <testcase time="2.911" classname="lbt14" name="lbt14_functions_with_gr_missing_gr_0_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-lbt14.R:28:3')"/>
    </testcase>
    <testcase time="1.55699999999999" classname="lbt14" name="lbt14_can_handle_all_NA_values"/>
    <testcase time="0.385999999999996" classname="lbt14" name="lbt14_can_handle_all_NA_values">
      <skipped message="Reason: On CRAN ('test-lbt14.R:41:3')"/>
    </testcase>
    <testcase time="1.90000000000001" classname="lbt14" name="lbt14_can_handle_some_NA_values"/>
    <testcase time="1.518" classname="lbt14" name="lbt14_can_handle_some_NA_values">
      <skipped message="Reason: On CRAN ('test-lbt14.R:60:3')"/>
    </testcase>
    <testcase time="6.53300000000002" classname="lbt14" name="lbt14_can_accept_different_gr_missing">
      <skipped message="Reason: On CRAN ('test-lbt14.R:67:3')"/>
    </testcase>
    <testcase time="0.0409999999999968" classname="lbt14" name="lbt14_fails_on_incomlete_data"/>
    <testcase time="1.613" classname="lbt14" name="lbt14_can_handle_all_NA_values_with_direction_high"/>
    <testcase time="0.413999999999987" classname="lbt14" name="lbt14_can_handle_all_NA_values_with_direction_high">
      <skipped message="Reason: On CRAN ('test-lbt14.R:92:3')"/>
    </testcase>
    <testcase time="1.99000000000001" classname="lbt14" name="lbt14_can_handle_some_NA_values_with_direction_high"/>
    <testcase time="1.66399999999999" classname="lbt14" name="lbt14_can_handle_some_NA_values_with_direction_high">
      <skipped message="Reason: On CRAN ('test-lbt14.R:111:3')"/>
    </testcase>
    <testcase time="6.50700000000001" classname="lbt14" name="lbt14_can_accept_different_gr_missing_with_direction_high">
      <skipped message="Reason: On CRAN ('test-lbt14.R:119:3')"/>
    </testcase>
    <testcase time="0.039999999999992" classname="lbt14" name="lbt14_fails_on_incomlete_data"/>
  </testsuite>
  <testsuite name="lbt15" timestamp="2023-09-20T17:18:44Z" hostname="4f35574870e0" tests="12" skipped="6" failures="0" errors="0" time="6.978">
    <testcase time="1.143" classname="lbt15" name="lbt15_functions_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-lbt15.R:7:3')"/>
    </testcase>
    <testcase time="0.475999999999999" classname="lbt15" name="lbt15_can_handle_all_NA_values"/>
    <testcase time="0.657000000000011" classname="lbt15" name="lbt15_can_handle_all_NA_values">
      <skipped message="Reason: On CRAN ('test-lbt15.R:20:3')"/>
    </testcase>
    <testcase time="0.498999999999995" classname="lbt15" name="lbt15_can_handle_missing_levels"/>
    <testcase time="0.66500000000002" classname="lbt15" name="lbt15_can_handle_missing_levels">
      <skipped message="Reason: On CRAN ('test-lbt15.R:31:3')"/>
    </testcase>
    <testcase time="0.47799999999998" classname="lbt15" name="lbt15_can_handle_missing_levels_in_baseline"/>
    <testcase time="0.685000000000002" classname="lbt15" name="lbt15_can_handle_missing_levels_in_baseline">
      <skipped message="Reason: On CRAN ('test-lbt15.R:42:3')"/>
    </testcase>
    <testcase time="0.488" classname="lbt15" name="lbt15_can_handle_some_NA_values"/>
    <testcase time="0.692000000000007" classname="lbt15" name="lbt15_can_handle_some_NA_values">
      <skipped message="Reason: On CRAN ('test-lbt15.R:50:3')"/>
    </testcase>
    <testcase time="0.472000000000008" classname="lbt15" name="lbt15_can_handle_some_NA_values_in_baseline"/>
    <testcase time="0.686999999999983" classname="lbt15" name="lbt15_can_handle_some_NA_values_in_baseline">
      <skipped message="Reason: On CRAN ('test-lbt15.R:58:3')"/>
    </testcase>
    <testcase time="0.0360000000000014" classname="lbt15" name="lbt15_fails_on_incomlete_data"/>
  </testsuite>
  <testsuite name="mht01" timestamp="2023-09-20T17:18:51Z" hostname="4f35574870e0" tests="3" skipped="3" failures="0" errors="0" time="2.351">
    <testcase time="0.788999999999987" classname="mht01" name="mht01_1_functions_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-mht01.R:7:3')"/>
    </testcase>
    <testcase time="0.782000000000011" classname="mht01" name="mht01_works">
      <skipped message="Reason: On CRAN ('test-mht01.R:15:3')"/>
    </testcase>
    <testcase time="0.780000000000001" classname="mht01" name="mht01_works_on_NULL_in_lbl_mhbodsys_or_lbl_mhdecod">
      <skipped message="Reason: On CRAN ('test-mht01.R:21:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="mng01" timestamp="2023-09-20T17:18:53Z" hostname="4f35574870e0" tests="12" skipped="6" failures="0" errors="0" time="8.18">
    <testcase time="1.28200000000001" classname="mng01" name="mng01_works_as_expected_with_default_argument_values"/>
    <testcase time="0.200999999999993" classname="mng01" name="mng01_works_as_expected_with_default_argument_values">
      <skipped message="Reason: On CRAN ('test-mng01.R:7:3')"/>
    </testcase>
    <testcase time="1.309" classname="mng01" name="mng01_works_as_expected_with_custom_argument_values"/>
    <testcase time="0.181000000000012" classname="mng01" name="mng01_works_as_expected_with_custom_argument_values">
      <skipped message="Reason: On CRAN ('test-mng01.R:25:3')"/>
    </testcase>
    <testcase time="1.30199999999999" classname="mng01" name="mng01_works_as_expected_with_custom_color_set"/>
    <testcase time="0.203000000000003" classname="mng01" name="mng01_works_as_expected_with_custom_color_set">
      <skipped message="Reason: On CRAN ('test-mng01.R:52:3')"/>
    </testcase>
    <testcase time="0.272999999999996" classname="mng01" name="mng01_works_with_table_NULL"/>
    <testcase time="0.245999999999981" classname="mng01" name="mng01_works_with_table_NULL">
      <skipped message="Reason: On CRAN ('test-mng01.R:63:3')"/>
    </testcase>
    <testcase time="1.33000000000001" classname="mng01" name="mng01_works_with_combination_of_x_variables"/>
    <testcase time="0.200999999999993" classname="mng01" name="mng01_works_with_combination_of_x_variables">
      <skipped message="Reason: On CRAN ('test-mng01.R:75:3')"/>
    </testcase>
    <testcase time="1.47" classname="mng01" name="mng01_works_with_numeric_jitter"/>
    <testcase time="0.182000000000016" classname="mng01" name="mng01_works_with_numeric_jitter">
      <skipped message="Reason: On CRAN ('test-mng01.R:87:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="pdl01" timestamp="2023-09-20T17:19:01Z" hostname="4f35574870e0" tests="2" skipped="0" failures="0" errors="2" time="0.12">
    <testcase time="0.0409999999999968" classname="pdl01" name="pdl01_works_with_adsl_dataset">
      <error type="error" message="Error in `(function (adam_db, dataset = &quot;addv&quot;, arm_var = &quot;ARM&quot;, disp_cols = names(adam_db[[dataset]]),  ('test-pdl01.R:6:3')">Error in `(function (adam_db, dataset = "addv", arm_var = "ARM", disp_cols = names(adam_db[[dataset]]), 
    default_formatting = list(all = fmt_config(align = "left"), 
        numeric = fmt_config(align = "center"), Date = fmt_config(format = format_date(), 
            align = "left"), POSIXct = fmt_config(format = format_date(), 
            align = "left"), POSIXt = fmt_config(format = format_date(), 
            align = "left")), unique_rows = TRUE, ...) 
{
    assert_all_tablenames(adam_db, dataset)
    assert_valid_variable(adam_db[[dataset]], c(disp_cols, arm_var), 
        label = paste0("adam_db$", dataset))
    assert_list(default_formatting, types = "fmt_config", names = "unique")
    assert_list(col_formatting, null.ok = TRUE, types = "fmt_config", 
        names = "unique")
    assert_flag(unique_rows)
    execute_with_args(as_listing, adam_db[[dataset]], key_cols = arm_var, 
        disp_cols = disp_cols, default_formatting = default_formatting, 
        unique_rows = unique_rows, ...)
})(adam_db = adam_db)`: object 'col_formatting' not found
Backtrace:
     x
  1. +-testthat::expect_message(res &lt;- run(pdl01, proc_data)) at test-pdl01.R:6:2
  2. | \-testthat:::expect_condition_matching(...)
  3. |   \-testthat:::quasi_capture(...)
  4. |     +-testthat (local) .capture(...)
  5. |     | \-base::withCallingHandlers(...)
  6. |     \-rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  7. +-chevron::run(pdl01, proc_data)
  8. +-chevron::run(pdl01, proc_data)
  9. | \-chevron:::do_call(object@main, c(proc_data, user_args))
 10. |   \-base::do.call(what, new_args, envir = args_env)
 11. \-chevron (local) `&lt;fn&gt;`(adam_db = adam_db)
 12.   \-checkmate::assert_list(...)
 13.     \-checkmate::checkList(...)
 14.       \-... %and% checkListTypes(x, types)
 15.         \-base::isTRUE(lhs)</error>
    </testcase>
    <testcase time="0.0790000000000077" classname="pdl01" name="pdl01_functions_work_as_expected">
      <error type="error" message="Error in `pdl01_main(.)`: object 'col_formatting' not found ('test-pdl01.R:15:3')">Error in `pdl01_main(.)`: object 'col_formatting' not found
Backtrace:
     x
  1. +-testthat::expect_message(res &lt;- pdl01_pre(proc_data) %&gt;% pdl01_main()) at test-pdl01.R:15:2
  2. | \-testthat:::expect_condition_matching(...)
  3. |   \-testthat:::quasi_capture(...)
  4. |     +-testthat (local) .capture(...)
  5. |     | \-base::withCallingHandlers(...)
  6. |     \-rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  7. +-pdl01_pre(proc_data) %&gt;% pdl01_main()
  8. \-chevron::pdl01_main(.)
  9.   \-checkmate::assert_list(...)
 10.     \-checkmate::checkList(...)
 11.       \-... %and% checkListTypes(x, types)
 12.         \-base::isTRUE(lhs)</error>
    </testcase>
  </testsuite>
  <testsuite name="pdt01" timestamp="2023-09-20T17:19:01Z" hostname="4f35574870e0" tests="5" skipped="3" failures="0" errors="0" time="1.816">
    <testcase time="0.780000000000001" classname="pdt01" name="pdt01_function_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-pdt01.R:7:3')"/>
    </testcase>
    <testcase time="0.127999999999986" classname="pdt01" name="pdt01_can_handle_all_NA_values"/>
    <testcase time="0.138000000000005" classname="pdt01" name="pdt01_can_handle_all_NA_values">
      <skipped message="Reason: On CRAN ('test-pdt01.R:21:3')"/>
    </testcase>
    <testcase time="0.341999999999985" classname="pdt01" name="pdt01_can_handle_some_NA_values"/>
    <testcase time="0.428000000000026" classname="pdt01" name="pdt01_can_handle_some_NA_values">
      <skipped message="Reason: On CRAN ('test-pdt01.R:36:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="pdt02" timestamp="2023-09-20T17:19:03Z" hostname="4f35574870e0" tests="5" skipped="3" failures="0" errors="0" time="1.15">
    <testcase time="0.369999999999976" classname="pdt02" name="pdt02_function_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-pdt02.R:7:3')"/>
    </testcase>
    <testcase time="0.174000000000007" classname="pdt02" name="pdt02_can_handle_all_NA_values"/>
    <testcase time="0.152000000000015" classname="pdt02" name="pdt02_can_handle_all_NA_values">
      <skipped message="Reason: On CRAN ('test-pdt02.R:21:3')"/>
    </testcase>
    <testcase time="0.238" classname="pdt02" name="pdt02_can_handle_some_NA_values"/>
    <testcase time="0.21599999999998" classname="pdt02" name="pdt02_can_handle_some_NA_values">
      <skipped message="Reason: On CRAN ('test-pdt02.R:36:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="reexports" timestamp="2023-09-20T17:19:04Z" hostname="4f35574870e0" tests="2" skipped="0" failures="0" errors="0" time="0.033">
    <testcase time="0.0229999999999961" classname="reexports" name="with_label_exported_correctly"/>
    <testcase time="0.0100000000000193" classname="reexports" name="reformat_exported_correctly"/>
  </testsuite>
  <testsuite name="rmpt01" timestamp="2023-09-20T17:19:04Z" hostname="4f35574870e0" tests="7" skipped="3" failures="0" errors="0" time="0.795">
    <testcase time="0.239999999999981" classname="rmpt01" name="rmpt01_function_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-rmpt01.R:7:3')"/>
    </testcase>
    <testcase time="0.105000000000018" classname="rmpt01" name="rmpt01_can_handle_NA_values"/>
    <testcase time="0.120000000000005" classname="rmpt01" name="rmpt01_can_handle_NA_values">
      <skipped message="Reason: On CRAN ('test-rmpt01.R:17:3')"/>
    </testcase>
    <testcase time="0.106999999999999" classname="rmpt01" name="rmpt01_can_handle_some_NA_values"/>
    <testcase time="0.117999999999995" classname="rmpt01" name="rmpt01_can_handle_some_NA_values">
      <skipped message="Reason: On CRAN ('test-rmpt01.R:31:3')"/>
    </testcase>
    <testcase time="0.0660000000000025" classname="rmpt01" name="rmpt01_fails_on_incomlete_data"/>
    <testcase time="0.0389999999999873" classname="rmpt01" name="rmpt01_fails_on_incomlete_data"/>
  </testsuite>
  <testsuite name="rmpt03" timestamp="2023-09-20T17:19:05Z" hostname="4f35574870e0" tests="8" skipped="3" failures="0" errors="0" time="1.249">
    <testcase time="0.37299999999999" classname="rmpt03" name="rmpt03_function_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-rmpt03.R:10:3')"/>
    </testcase>
    <testcase time="0.152000000000015" classname="rmpt03" name="rmpt03_can_handle_NA_values"/>
    <testcase time="0.211999999999989" classname="rmpt03" name="rmpt03_can_handle_NA_values">
      <skipped message="Reason: On CRAN ('test-rmpt03.R:22:3')"/>
    </testcase>
    <testcase time="0.163000000000011" classname="rmpt03" name="rmpt03_can_handle_some_NA_values"/>
    <testcase time="0.210999999999984" classname="rmpt03" name="rmpt03_can_handle_some_NA_values">
      <skipped message="Reason: On CRAN ('test-rmpt03.R:38:3')"/>
    </testcase>
    <testcase time="0.0700000000000216" classname="rmpt03" name="rmpt03_fails_on_incomlete_data"/>
    <testcase time="0.0389999999999873" classname="rmpt03" name="rmpt03_fails_on_incomlete_data"/>
    <testcase time="0.0289999999999964" classname="rmpt03" name="rmpt03_fails_on_incomlete_data"/>
  </testsuite>
  <testsuite name="rmpt04" timestamp="2023-09-20T17:19:06Z" hostname="4f35574870e0" tests="6" skipped="3" failures="0" errors="0" time="0.736">
    <testcase time="0.218999999999994" classname="rmpt04" name="rmpt04_function_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-rmpt04.R:7:3')"/>
    </testcase>
    <testcase time="0.0910000000000082" classname="rmpt04" name="rmpt04_can_handle_NA_values"/>
    <testcase time="0.131" classname="rmpt04" name="rmpt04_can_handle_NA_values">
      <skipped message="Reason: On CRAN ('test-rmpt04.R:17:3')"/>
    </testcase>
    <testcase time="0.0960000000000036" classname="rmpt04" name="rmpt04_can_handle_some_NA_values"/>
    <testcase time="0.131" classname="rmpt04" name="rmpt04_can_handle_some_NA_values">
      <skipped message="Reason: On CRAN ('test-rmpt04.R:34:3')"/>
    </testcase>
    <testcase time="0.0679999999999836" classname="rmpt04" name="rmpt04_fails_on_incomlete_data"/>
  </testsuite>
  <testsuite name="rmpt05" timestamp="2023-09-20T17:19:07Z" hostname="4f35574870e0" tests="6" skipped="3" failures="0" errors="0" time="0.845">
    <testcase time="0.262" classname="rmpt05" name="rmpt05_function_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-rmpt05.R:7:3')"/>
    </testcase>
    <testcase time="0.103000000000009" classname="rmpt05" name="rmpt05_can_handle_NA_values"/>
    <testcase time="0.150000000000006" classname="rmpt05" name="rmpt05_can_handle_NA_values">
      <skipped message="Reason: On CRAN ('test-rmpt05.R:17:3')"/>
    </testcase>
    <testcase time="0.109000000000009" classname="rmpt05" name="rmpt05_can_handle_some_NA_values"/>
    <testcase time="0.151999999999987" classname="rmpt05" name="rmpt05_can_handle_some_NA_values">
      <skipped message="Reason: On CRAN ('test-rmpt05.R:34:3')"/>
    </testcase>
    <testcase time="0.0689999999999884" classname="rmpt05" name="rmpt05_fails_on_incomlete_data"/>
  </testsuite>
  <testsuite name="rmpt06" timestamp="2023-09-20T17:19:08Z" hostname="4f35574870e0" tests="4" skipped="3" failures="0" errors="0" time="2.041">
    <testcase time="0.679000000000002" classname="rmpt06" name="rmpt06_works_as_expected">
      <skipped message="Reason: On CRAN ('test-rmpt06.R:8:3')"/>
    </testcase>
    <testcase time="0.742000000000019" classname="rmpt06" name="rmpt06_works_as_expected_with_show_diff_TRUE">
      <skipped message="Reason: On CRAN ('test-rmpt06.R:16:3')"/>
    </testcase>
    <testcase time="0.329999999999984" classname="rmpt06" name="rmpt06_can_handle_all_NA_values"/>
    <testcase time="0.29000000000002" classname="rmpt06" name="rmpt06_can_handle_all_NA_values">
      <skipped message="Reason: On CRAN ('test-rmpt06.R:29:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="rspt01" timestamp="2023-09-20T17:19:10Z" hostname="4f35574870e0" tests="15" skipped="7" failures="0" errors="0" time="4.742">
    <testcase time="0.0459999999999923" classname="rspt01" name="rspt01_works_as_expected"/>
    <testcase time="0.412999999999982" classname="rspt01" name="rspt01_works_as_expected"/>
    <testcase time="0.271000000000015" classname="rspt01" name="rspt01_works_as_expected">
      <skipped message="Reason: On CRAN ('test-rspt01.R:5:3')"/>
    </testcase>
    <testcase time="0.426999999999992" classname="rspt01" name="rspt01_works_as_expected_for_stratified_and_unstratified_analysis"/>
    <testcase time="0.306000000000012" classname="rspt01" name="rspt01_works_as_expected_for_stratified_and_unstratified_analysis">
      <skipped message="Reason: On CRAN ('test-rspt01.R:17:3')"/>
    </testcase>
    <testcase time="0.34699999999998" classname="rspt01" name="rspt01_works_as_expected_for_unstratified_analysis_only"/>
    <testcase time="0.267000000000024" classname="rspt01" name="rspt01_works_as_expected_for_unstratified_analysis_only">
      <skipped message="Reason: On CRAN ('test-rspt01.R:36:3')"/>
    </testcase>
    <testcase time="0.350999999999999" classname="rspt01" name="rspt01_works_as_expected_for_stratified_analysis_only"/>
    <testcase time="0.268999999999977" classname="rspt01" name="rspt01_works_as_expected_for_stratified_analysis_only">
      <skipped message="Reason: On CRAN ('test-rspt01.R:55:3')"/>
    </testcase>
    <testcase time="0.419000000000011" classname="rspt01" name="rspt01_works_if_change_reference_group"/>
    <testcase time="0.272999999999996" classname="rspt01" name="rspt01_works_if_change_reference_group">
      <skipped message="Reason: On CRAN ('test-rspt01.R:74:3')"/>
    </testcase>
    <testcase time="0.406000000000006" classname="rspt01" name="rspt01_works_if_change_statistic_methods"/>
    <testcase time="0.271999999999991" classname="rspt01" name="rspt01_works_if_change_statistic_methods">
      <skipped message="Reason: On CRAN ('test-rspt01.R:97:3')"/>
    </testcase>
    <testcase time="0.405000000000001" classname="rspt01" name="rspt01_works_if_change_confidence_interval"/>
    <testcase time="0.27000000000001" classname="rspt01" name="rspt01_works_if_change_confidence_interval">
      <skipped message="Reason: On CRAN ('test-rspt01.R:123:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="ttet01" timestamp="2023-09-20T17:19:15Z" hostname="4f35574870e0" tests="9" skipped="4" failures="0" errors="0" time="3.706">
    <testcase time="0.046999999999997" classname="ttet01" name="ttet01_works_as_expected"/>
    <testcase time="0.563999999999993" classname="ttet01" name="ttet01_works_as_expected"/>
    <testcase time="0.480000000000018" classname="ttet01" name="ttet01_works_as_expected">
      <skipped message="Reason: On CRAN ('test-ttet01.R:10:3')"/>
    </testcase>
    <testcase time="0.451999999999998" classname="ttet01" name="ttet01_works_as_expected_for_stratified_and_unstratified_analysis"/>
    <testcase time="0.400999999999982" classname="ttet01" name="ttet01_works_as_expected_for_stratified_and_unstratified_analysis">
      <skipped message="Reason: On CRAN ('test-ttet01.R:22:3')"/>
    </testcase>
    <testcase time="0.460000000000008" classname="ttet01" name="ttet01_works_as_expected_for_stratified_analysis_only"/>
    <testcase time="0.424000000000007" classname="ttet01" name="ttet01_works_as_expected_for_stratified_analysis_only">
      <skipped message="Reason: On CRAN ('test-ttet01.R:44:3')"/>
    </testcase>
    <testcase time="0.467999999999989" classname="ttet01" name="ttet01_works_if_change_reference_group"/>
    <testcase time="0.409999999999997" classname="ttet01" name="ttet01_works_if_change_reference_group">
      <skipped message="Reason: On CRAN ('test-ttet01.R:66:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="utils" timestamp="2023-09-20T17:19:18Z" hostname="4f35574870e0" tests="24" skipped="1" failures="0" errors="0" time="0.202">
    <testcase time="0.0240000000000009" classname="utils" name="h_format_dec_works_as_exected"/>
    <testcase time="0.0040000000000191" classname="utils" name="h_format_dec_works_as_exected"/>
    <testcase time="0.00199999999998113" classname="utils" name="h_format_dec_works_as_exected"/>
    <testcase time="0.0040000000000191" classname="utils" name="h_format_dec_works_as_exected"/>
    <testcase time="0.00199999999998113" classname="utils" name="h_format_dec_works_as_exected"/>
    <testcase time="0.00300000000001432" classname="utils" name="h_format_dec_works_as_exected"/>
    <testcase time="0.00199999999998113" classname="utils" name="h_format_dec_works_as_exected"/>
    <testcase time="0.0040000000000191" classname="utils" name="h_format_dec_works_as_exected"/>
    <testcase time="0.00199999999998113" classname="utils" name="h_format_dec_works_as_exected"/>
    <testcase time="0.0040000000000191" classname="utils" name="h_format_dec_works_as_exected"/>
    <testcase time="0.00199999999998113" classname="utils" name="h_format_dec_works_as_exected"/>
    <testcase time="0.0040000000000191" classname="utils" name="h_format_dec_works_as_exected"/>
    <testcase time="0.00999999999999091" classname="utils" name="h_format_dec_works_as_expected_with_more_than_one_value"/>
    <testcase time="0.00399999999999068" classname="utils" name="h_format_dec_works_as_expected_with_more_than_one_value"/>
    <testcase time="0.0100000000000193" classname="utils" name="h_format_dec_works_as_expected_with_NA_digits"/>
    <testcase time="0.00899999999998613" classname="utils" name="fuse_sequentially_works"/>
    <testcase time="0.00499999999999545" classname="utils" name="fuse_sequentially_works"/>
    <testcase time="0.00800000000000978" classname="utils" name="grob_list_works"/>
    <testcase time="0.00100000000000477" classname="utils" name="grob_list_works"/>
    <testcase time="0.00399999999999068" classname="utils" name="grob_list_works"/>
    <testcase time="0.00399999999999068" classname="utils" name="grob_list_works"/>
    <testcase time="0.0180000000000007" classname="utils" name="ifneeded_split_row_works_as_expected"/>
    <testcase time="0.00800000000000978" classname="utils" name="ifneeded_split_row_works_as_expected"/>
    <testcase time="0.063999999999993" classname="utils" name="_unnamed_">
      <skipped message="Reason: On CRAN ('test-utils.R:88:1')"/>
    </testcase>
  </testsuite>
  <testsuite name="vst01" timestamp="2023-09-20T17:19:19Z" hostname="4f35574870e0" tests="3" skipped="2" failures="0" errors="0" time="17.046">
    <testcase time="8.74200000000002" classname="vst01" name="vst01_functions_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-vst01.R:7:3')"/>
    </testcase>
    <testcase time="3.43699999999998" classname="vst01" name="run_vst01_works_as_expected"/>
    <testcase time="4.86700000000002" classname="vst01" name="run_vst01_works_as_expected">
      <skipped message="Reason: On CRAN ('test-vst01.R:14:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="vst02" timestamp="2023-09-20T17:19:36Z" hostname="4f35574870e0" tests="2" skipped="2" failures="0" errors="0" time="1.272">
    <testcase time="0.647999999999996" classname="vst02" name="vst02_functions_with_default_argument_value_return_expected_result_with_test_data">
      <skipped message="Reason: On CRAN ('test-vst02.R:7:3')"/>
    </testcase>
    <testcase time="0.623999999999995" classname="vst02" name="vst02_functions_return_expected_result_with_test_data_when_excluding_subject_with_baseline_abnormality">
      <skipped message="Reason: On CRAN ('test-vst02.R:14:3')"/>
    </testcase>
  </testsuite>
</testsuites>
