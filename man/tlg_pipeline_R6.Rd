% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TLG_pipeline-R6class.R
\name{tlg_pipeline_R6}
\alias{tlg_pipeline_R6}
\title{R6 Class representing a \code{tlg}pipeline}
\description{
R6 Class representing a \code{tlg}pipeline

R6 Class representing a \code{tlg}pipeline
}
\details{
An instance of \code{tlg_pipeline} possesses a \code{tlg} generating function, a pre processing function, a check function and
is associated with one or more \code{adam} table names.

A \code{tlg_pipeline_R6} can be created empty or based on a \code{tlg} function name, in which case, the corresponding pre
processing and check function will also be associated.

Check, pre processing and \code{tlg} function of a \code{tlg_pipeline} can be manually assigned. If modified, the initial
functions can be restored with the \code{reset} method.
}
\examples{
aet01_1_pipeline <- tlg_pipeline_R6$new("aet01_1", c("adsl", "adae"))
aet01_1_pipeline$run(syn_test_data())

aet01_1_pipeline$preprocess <- function(x) x
try(aet01_1_pipeline$run(syn_test_data()))

aet01_1_pipeline$reset()
aet01_1_pipeline$run(syn_test_data())

## ------------------------------------------------
## Method `tlg_pipeline_R6$run`
## ------------------------------------------------

dst01_1_pipeline <- tlg_pipeline_R6$new("dst01_1", c("adsl"))

.study <- list(
 planarm = "ARM",
 lbl_overall = NULL,
 disc_reason_var = "DCSREAS",
 status_var = "EOSSTT"
)

dst01_1_pipeline$run(syn_test_data(), .study = .study, armvar = "ARM")

}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{tlg}}{\code{tlg} generating function.}

\item{\code{preprocess}}{\code{tlg} pre processing function.}

\item{\code{check}}{input checking function.}

\item{\code{tables}}{the names of the tables associated with the \code{tlg} function}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-tlg_pipeline_R6-new}{\code{tlg_pipeline_R6$new()}}
\item \href{#method-tlg_pipeline_R6-run}{\code{tlg_pipeline_R6$run()}}
\item \href{#method-tlg_pipeline_R6-reset}{\code{tlg_pipeline_R6$reset()}}
\item \href{#method-tlg_pipeline_R6-clone}{\code{tlg_pipeline_R6$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-tlg_pipeline_R6-new"></a>}}
\if{latex}{\out{\hypertarget{method-tlg_pipeline_R6-new}{}}}
\subsection{Method \code{new()}}{
Create a new instance of the \code{tlg_pipeline} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{tlg_pipeline_R6$new(fun_name, tables)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fun_name}}{(\code{string}) the name of the \code{chevron} tlg function.}

\item{\code{tables}}{(\code{character}) the names of the tables necessary to the \code{tlg} function.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-tlg_pipeline_R6-run"></a>}}
\if{latex}{\out{\hypertarget{method-tlg_pipeline_R6-run}{}}}
\subsection{Method \code{run()}}{
Execute the pipeline defined by check, pre process and \code{tlg} function.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{tlg_pipeline_R6$run(adam_db, safe = FALSE, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{adam_db}}{(\code{dm}) input for the \code{tlg} creation.}

\item{\code{safe}}{(\code{flag}) should the input be checked.}

\item{\code{...}}{optional arguments passed to the \code{preprocess} and \code{tlg} functions.}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{dst01_1_pipeline <- tlg_pipeline_R6$new("dst01_1", c("adsl"))

.study <- list(
 planarm = "ARM",
 lbl_overall = NULL,
 disc_reason_var = "DCSREAS",
 status_var = "EOSSTT"
)

dst01_1_pipeline$run(syn_test_data(), .study = .study, armvar = "ARM")

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-tlg_pipeline_R6-reset"></a>}}
\if{latex}{\out{\hypertarget{method-tlg_pipeline_R6-reset}{}}}
\subsection{Method \code{reset()}}{
Return to the original functions and tables.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{tlg_pipeline_R6$reset(
  tlg = TRUE,
  preprocess = TRUE,
  check = TRUE,
  tables = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{tlg}}{(\code{flag}) should the original \code{tlg} function by restored.}

\item{\code{preprocess}}{(\code{flag}) should the original \code{preprocess} function by restored.}

\item{\code{check}}{(\code{flag}) should the original \code{check} function by restored.}

\item{\code{tables}}{(\code{flag}) should the original \code{tables} value by restored.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-tlg_pipeline_R6-clone"></a>}}
\if{latex}{\out{\hypertarget{method-tlg_pipeline_R6-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{tlg_pipeline_R6$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
